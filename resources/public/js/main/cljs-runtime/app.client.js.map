{"version":3,"sources":["app/client.cljs"],"mappings":";AAOA,GAAA,QAAAA,gCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,kBAAK,AAACC;;AASf,AAAA,AAAA;AAAA,IAAAC,+BAAA,2CAAA,wDAAA,iCAAaU;AAAb,AAAA,0FAAA,2CAAA,gEACuB,AAACG,0EAAeC;GADvC,wEAAA,mDAEuBC;AAFvB,AAAA,kDAAA,gEAE2C,iBAAAC,WAAwBF;IAAxBG,WAAA,2CAAA,kDAAA;AAAA,AAAA,8KAAAD,SAAAC,0EAAAD,SAAAC,lQAACC,oFAAAA,uGAAAA;;GAF5C,0DAAA,iCAAaR;AAAb,AAAA,OAAAT,uDAAA,NAAaS;AAAb,AAAA,IAAAR,aAAA,CAAAC,wEAAAA,+EAAAA,TAAaO,2DAAAA;IAAbR,iBAAA,AAAAE,4BAAAF;YAAAA,RAAyCU;gBAAzC,AAAAP,4CAAAH,eAAA,vEAA0BS;AAA1B,AAIE,AAACQ,yGAAQR;;AACT,OAAAS,8EAAA,MAAA,sPAAA,nKAAS,CAACC,mDAAAA,8DAAAA,bAASV,0CAAAA;;;AALrB,AAAA,GAAA,QAAAhB,gCAAAC,uCAAAU;AAAA;AAAA,AAAA;;;kBAAA,AAAAC,oDAAA,AAAAF,4CAAAL,6BAAA,/IAAOS;;;AAAP,AAAAD,4EAAA,wEAAAR,xFAAOS;AAQP;;;kBAAA,lBAAea;AAAf,AAGE,6GAAA,7GAACC,6EAAWzB,gBAAKW;;AACjB,mBAAA,ZAACe;;;AAEH;;;qBAAA,rBAAeC;AAAf,AAIE,6GAAA,7GAACF,6EAAWzB,gBAAKW;;AAEjB,AAACiB,8FAA8B5B;;AAC/B,mBAAA,ZAAC0B","names":["js/app","js/app.client","js/app.client.app1","app.client/app1","com.fulcrologic.fulcro.application.fulcro_app","options__34775__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__44184","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/app.client.Root","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","app.client/Root","this","tictactoe","props","com.fulcrologic.fulcro.components.get_query","app.board/Board","params","G__44182","G__44183","com.fulcrologic.fulcro.components/get-initial-state","cljs.core.println","com.fulcrologic.fulcro.dom.macro_create_element","app.board/ui-board","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_","js/console.log","app.client/refresh","com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_"],"sourcesContent":["(ns app.client\n  (:require\n   [com.fulcrologic.fulcro.application :as app]\n   [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n   [com.fulcrologic.fulcro.dom :as dom]\n   [app.board :as board :refer [Board ui-board]]))\n\n(defonce app1 (app/fulcro-app))\n\n#_(comp/get-initial-state Board {:board/id :tictactoe :board/rows [(comp/get-initial-state Row {:id 0})\n                                                                   (comp/get-initial-state Row {:id 1})\n                                                                   (comp/get-initial-state Row {:id 2})]})\n\n#_(comp/get-query Board)\n#_(comp/get-initial-state Board {:id :tictactoe})\n\n(defsc Root [this {:keys [tictactoe] :as props}]\n  {:query [{:tictactoe (comp/get-query Board)}]\n   :initial-state (fn [params] {:tictactoe (comp/get-initial-state Board {:id :tictactoe})})}\n\n  (println tictactoe)\n  (dom/div (ui-board tictactoe)))\n\n\n(defn ^:export init\n  \"Shadow-cljs sets this up to be our entry-point function. See shadow-cljs.edn `:init-fn` in the modules of the main build.\"\n  []\n  (app/mount! app1 Root \"app\")\n  (js/console.log \"Loaded\"))\n\n(defn ^:export refresh\n  \"During development, shadow-cljs will call this on every hot reload of source. See shadow-cljs.edn\"\n  []\n  ;; re-mounting will cause forced UI refresh, update internals, etc.\n  (app/mount! app1 Root \"app\")\n  ;; As of Fulcro 3.3.0, this addition will help with stale queries when using dynamic routing:\n  (comp/refresh-dynamic-queries! app1)\n  (js/console.log \"Hot reload\"))"]}