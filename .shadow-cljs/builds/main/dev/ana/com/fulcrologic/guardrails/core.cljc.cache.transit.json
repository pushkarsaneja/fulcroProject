["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.guardrails.core');\ncom.fulcrologic.guardrails.core._EQ__GT_ = new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814);\ncom.fulcrologic.guardrails.core._BAR_ = new cljs.core.Keyword(null,\"st\",\"st\",1455255828);\ncom.fulcrologic.guardrails.core._LT__ = new cljs.core.Keyword(null,\"gen\",\"gen\",142575302);\ncom.fulcrologic.guardrails.core.global_context = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.List.EMPTY);\n/**\n * Push a global context, accessible from all threads, onto a stack.\n * Used to add information to what guardrails will report when a function failed a check.\n */\ncom.fulcrologic.guardrails.core.enter_global_context_BANG_ = (function com$fulcrologic$guardrails$core$enter_global_context_BANG_(ctx){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.guardrails.core.global_context,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.cons,ctx));\n});\n/**\n * Pops a global context (see `enter-global-context!`).\n * Should be passed the same context that was pushed, although is not enforced, as it's only to be easily compatible with fulcro-spec's hooks API.\n */\ncom.fulcrologic.guardrails.core.leave_global_context_BANG_ = (function com$fulcrologic$guardrails$core$leave_global_context_BANG_(ctx){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.guardrails.core.global_context,cljs.core.rest);\n});\ncom.fulcrologic.guardrails.core.get_global_context = (function com$fulcrologic$guardrails$core$get_global_context(){\nreturn cljs.core.first(cljs.core.deref(com.fulcrologic.guardrails.core.global_context));\n});\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.core !== 'undefined') && (typeof com.fulcrologic.guardrails.core.pending_check_channel !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.core.pending_check_channel = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(cljs.core.async.dropping_buffer((10000)));\n}\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.core !== 'undefined') && (typeof com.fulcrologic.guardrails.core.async_go_channel !== 'undefined')){\n} else {\ncom.fulcrologic.guardrails.core.async_go_channel = (function (){var c__38271__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\ncljs.core.async.impl.dispatch.run((function (){\nvar f__38272__auto__ = (function (){var switch__37993__auto__ = (function (state_43129){\nvar state_val_43130 = (state_43129[(1)]);\nif((state_val_43130 === (7))){\nvar inst_43125 = (state_43129[(2)]);\nvar state_43129__$1 = state_43129;\nvar statearr_43132_43194 = state_43129__$1;\n(statearr_43132_43194[(2)] = inst_43125);\n\n(statearr_43132_43194[(1)] = (4));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (1))){\nvar state_43129__$1 = state_43129;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_43129__$1,(2),com.fulcrologic.guardrails.core.pending_check_channel);\n} else {\nif((state_val_43130 === (4))){\nvar inst_43127 = (state_43129[(2)]);\nvar state_43129__$1 = state_43129;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_43129__$1,inst_43127);\n} else {\nif((state_val_43130 === (6))){\nvar inst_43123 = cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Guardrails ASYNC LOOP STOPPED ****************************************\"], 0));\nvar state_43129__$1 = state_43129;\nvar statearr_43133_43195 = state_43129__$1;\n(statearr_43133_43195[(2)] = inst_43123);\n\n(statearr_43133_43195[(1)] = (7));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (3))){\nvar inst_43106 = (state_43129[(7)]);\nvar state_43129__$1 = state_43129;\nif(cljs.core.truth_(inst_43106)){\nvar statearr_43135_43196 = state_43129__$1;\n(statearr_43135_43196[(1)] = (5));\n\n} else {\nvar statearr_43136_43197 = state_43129__$1;\n(statearr_43136_43197[(1)] = (6));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (12))){\nvar inst_43120 = (state_43129[(2)]);\nvar inst_43106 = inst_43120;\nvar state_43129__$1 = (function (){var statearr_43138 = state_43129;\n(statearr_43138[(7)] = inst_43106);\n\nreturn statearr_43138;\n})();\nvar statearr_43139_43198 = state_43129__$1;\n(statearr_43139_43198[(2)] = null);\n\n(statearr_43139_43198[(1)] = (3));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (2))){\nvar inst_43105 = (state_43129[(2)]);\nvar inst_43106 = inst_43105;\nvar state_43129__$1 = (function (){var statearr_43141 = state_43129;\n(statearr_43141[(7)] = inst_43106);\n\nreturn statearr_43141;\n})();\nvar statearr_43142_43199 = state_43129__$1;\n(statearr_43142_43199[(2)] = null);\n\n(statearr_43142_43199[(1)] = (3));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (11))){\nvar _ = (function (){var statearr_43143 = state_43129;\n(statearr_43143[(4)] = cljs.core.rest((state_43129[(4)])));\n\nreturn statearr_43143;\n})();\nvar state_43129__$1 = state_43129;\nvar ex43137 = (state_43129__$1[(2)]);\nvar statearr_43145_43200 = state_43129__$1;\n(statearr_43145_43200[(5)] = ex43137);\n\n\nvar statearr_43146_43201 = state_43129__$1;\n(statearr_43146_43201[(1)] = (10));\n\n(statearr_43146_43201[(5)] = null);\n\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (9))){\nvar inst_43118 = (state_43129[(2)]);\nvar state_43129__$1 = (function (){var statearr_43147 = state_43129;\n(statearr_43147[(8)] = inst_43118);\n\nreturn statearr_43147;\n})();\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_43129__$1,(12),com.fulcrologic.guardrails.core.pending_check_channel);\n} else {\nif((state_val_43130 === (5))){\nvar state_43129__$1 = state_43129;\nvar statearr_43149_43202 = state_43129__$1;\n(statearr_43149_43202[(2)] = null);\n\n(statearr_43149_43202[(1)] = (8));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (10))){\nvar inst_43109 = (state_43129[(2)]);\nvar state_43129__$1 = (function (){var statearr_43150 = state_43129;\n(statearr_43150[(9)] = inst_43109);\n\nreturn statearr_43150;\n})();\nvar statearr_43151_43203 = state_43129__$1;\n(statearr_43151_43203[(2)] = null);\n\n(statearr_43151_43203[(1)] = (9));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_43130 === (8))){\nvar inst_43106 = (state_43129[(7)]);\nvar _ = (function (){var statearr_43152 = state_43129;\n(statearr_43152[(4)] = cljs.core.cons((11),(state_43129[(4)])));\n\nreturn statearr_43152;\n})();\nvar inst_43115 = (inst_43106.cljs$core$IFn$_invoke$arity$0 ? inst_43106.cljs$core$IFn$_invoke$arity$0() : inst_43106.call(null));\nvar ___$1 = (function (){var statearr_43153 = state_43129;\n(statearr_43153[(4)] = cljs.core.rest((state_43129[(4)])));\n\nreturn statearr_43153;\n})();\nvar state_43129__$1 = state_43129;\nvar statearr_43154_43204 = state_43129__$1;\n(statearr_43154_43204[(2)] = inst_43115);\n\n(statearr_43154_43204[(1)] = (9));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\nreturn (function() {\nvar com$fulcrologic$guardrails$core$state_machine__37994__auto__ = null;\nvar com$fulcrologic$guardrails$core$state_machine__37994__auto____0 = (function (){\nvar statearr_43155 = [null,null,null,null,null,null,null,null,null,null];\n(statearr_43155[(0)] = com$fulcrologic$guardrails$core$state_machine__37994__auto__);\n\n(statearr_43155[(1)] = (1));\n\nreturn statearr_43155;\n});\nvar com$fulcrologic$guardrails$core$state_machine__37994__auto____1 = (function (state_43129){\nwhile(true){\nvar ret_value__37995__auto__ = (function (){try{while(true){\nvar result__37996__auto__ = switch__37993__auto__(state_43129);\nif(cljs.core.keyword_identical_QMARK_(result__37996__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__37996__auto__;\n}\nbreak;\n}\n}catch (e43156){var ex__37997__auto__ = e43156;\nvar statearr_43157_43205 = state_43129;\n(statearr_43157_43205[(2)] = ex__37997__auto__);\n\n\nif(cljs.core.seq((state_43129[(4)]))){\nvar statearr_43158_43206 = state_43129;\n(statearr_43158_43206[(1)] = cljs.core.first((state_43129[(4)])));\n\n} else {\nthrow ex__37997__auto__;\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__37995__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__43207 = state_43129;\nstate_43129 = G__43207;\ncontinue;\n} else {\nreturn ret_value__37995__auto__;\n}\nbreak;\n}\n});\ncom$fulcrologic$guardrails$core$state_machine__37994__auto__ = function(state_43129){\nswitch(arguments.length){\ncase 0:\nreturn com$fulcrologic$guardrails$core$state_machine__37994__auto____0.call(this);\ncase 1:\nreturn com$fulcrologic$guardrails$core$state_machine__37994__auto____1.call(this,state_43129);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ncom$fulcrologic$guardrails$core$state_machine__37994__auto__.cljs$core$IFn$_invoke$arity$0 = com$fulcrologic$guardrails$core$state_machine__37994__auto____0;\ncom$fulcrologic$guardrails$core$state_machine__37994__auto__.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$guardrails$core$state_machine__37994__auto____1;\nreturn com$fulcrologic$guardrails$core$state_machine__37994__auto__;\n})()\n})();\nvar state__38273__auto__ = (function (){var statearr_43161 = f__38272__auto__();\n(statearr_43161[(6)] = c__38271__auto__);\n\nreturn statearr_43161;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__38273__auto__);\n}));\n\nreturn c__38271__auto__;\n})();\n}\ncom.fulcrologic.guardrails.core.output_fn = (function com$fulcrologic$guardrails$core$output_fn(data){\nvar map__43164 = data;\nvar map__43164__$1 = cljs.core.__destructure_map(map__43164);\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\nvar _QMARK_file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675));\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43164__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\nreturn [clojure.string.upper_case(cljs.core.name(level)),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(function (){var temp__5753__auto__ = _QMARK_err;\nif(cljs.core.truth_(temp__5753__auto__)){\nvar err = temp__5753__auto__;\nreturn [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.guardrails.utils.stacktrace.cljs$core$IFn$_invoke$arity$1(err))].join('');\n} else {\nreturn null;\n}\n})()].join('');\n});\ncom.fulcrologic.guardrails.core.now_ms = (function com$fulcrologic$guardrails$core$now_ms(){\nreturn cljs.core.inst_ms((new Date()));\n});\ncom.fulcrologic.guardrails.core.tap = (((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.tap_GT_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn cljs.core.tap_GT_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"cljs.core\",\"tap>\",\"cljs.core/tap>\",895722640,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"cljs.core\",\"cljs.core\",770546058,null),new cljs.core.Symbol(null,\"tap>\",\"tap>\",1822490677,null),\"cljs/core.cljs\",20,1,11858,11858,new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null)),\"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.\",((cljs.core.tap_GT_)?cljs.core.tap_GT_.cljs$lang$test:null)]))):null);\ncom.fulcrologic.guardrails.core.run_check = (function com$fulcrologic$guardrails$core$run_check(p__43176,spec,value){\nvar map__43177 = p__43176;\nvar map__43177__$1 = cljs.core.__destructure_map(map__43177);\nvar tap_GT__QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"tap>?\",\"tap>?\",212454486));\nvar args_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"args?\",\"args?\",-1963723548));\nvar vararg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"vararg?\",\"vararg?\",1908105777));\nvar callsite = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"callsite\",\"callsite\",243654023));\nvar throw_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"throw?\",\"throw?\",-2036749118));\nvar fn_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"fn-name\",\"fn-name\",-766594004));\nvar expound_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43177__$1,new cljs.core.Keyword(null,\"expound-opts\",\"expound-opts\",623087481));\nvar start_43208 = com.fulcrologic.guardrails.core.now_ms();\nvar vargs_QMARK__43209 = (function (){var and__5041__auto__ = args_QMARK_;\nif(cljs.core.truth_(and__5041__auto__)){\nreturn vararg_QMARK_;\n} else {\nreturn and__5041__auto__;\n}\n})();\nvar varg_43210 = (cljs.core.truth_(vargs_QMARK__43209)?cljs.core.last(cljs.core.seq(value)):null);\nvar specable_args_43211 = (cljs.core.truth_(vargs_QMARK__43209)?((cljs.core.map_QMARK_(varg_43210))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.flatten(cljs.core.seq(varg_43210))):cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.seq(varg_43210))):value);\nvar valid_exception_43212 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\ntry{if(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(spec,specable_args_43211)){\n} else {\nvar problem_43213 = expound.alpha.expound_str.cljs$core$IFn$_invoke$arity$3(spec,specable_args_43211,expound_opts);\nvar description_43214 = [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name),(cljs.core.truth_(args_QMARK_)?\" argument list\":\" return type\"),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(problem_43213)].join('');\nvar context_43215 = com.fulcrologic.guardrails.core.get_global_context();\nif(cljs.core.truth_((function (){var and__5041__auto__ = com.fulcrologic.guardrails.core.tap;\nif(cljs.core.truth_(and__5041__auto__)){\nreturn tap_GT__QMARK_;\n} else {\nreturn and__5041__auto__;\n}\n})())){\nvar G__43179_43216 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"validation-error\",\"com.fulcrologic.guardrails/validation-error\",776351266),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"fn-name\",\"com.fulcrologic.guardrails/fn-name\",-762819408),fn_name,new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"failure-point\",\"com.fulcrologic.guardrails/failure-point\",340797326),(cljs.core.truth_(args_QMARK_)?new cljs.core.Keyword(null,\"args\",\"args\",1315556576):new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814)),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"spec\",\"com.fulcrologic.guardrails/spec\",343160061),spec,new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"explain-data\",\"com.fulcrologic.guardrails/explain-data\",-1120944464),cljs.spec.alpha.explain_data(spec,specable_args_43211)], null);\n(com.fulcrologic.guardrails.core.tap.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.guardrails.core.tap.cljs$core$IFn$_invoke$arity$1(G__43179_43216) : com.fulcrologic.guardrails.core.tap.call(null,G__43179_43216));\n} else {\n}\n\nif(cljs.core.truth_(throw_QMARK_)){\ncljs.core.reset_BANG_(valid_exception_43212,cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2((function (){var G__43180 = description_43214;\nif(cljs.core.truth_(context_43215)){\nreturn [\"\\nContext: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(context_43215),G__43180].join('');\n} else {\nreturn G__43180;\n}\n})(),cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"validation-error\",\"com.fulcrologic.guardrails/validation-error\",776351266),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"fn-name\",\"com.fulcrologic.guardrails/fn-name\",-762819408),fn_name,new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"failure-point\",\"com.fulcrologic.guardrails/failure-point\",340797326),(cljs.core.truth_(args_QMARK_)?new cljs.core.Keyword(null,\"args\",\"args\",1315556576):new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814)),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"spec\",\"com.fulcrologic.guardrails/spec\",343160061),spec,new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"context\",\"com.fulcrologic.guardrails/context\",-834538901),context_43215], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"val\",\"com.fulcrologic.guardrails/val\",132345656),specable_args_43211], null))));\n} else {\ncom.fulcrologic.guardrails.utils.report_problem([description_43214,\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.guardrails.utils.stacktrace.cljs$core$IFn$_invoke$arity$1((function (){var or__5043__auto__ = callsite;\nif(cljs.core.truth_(or__5043__auto__)){\nreturn or__5043__auto__;\n} else {\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"\",cljs.core.PersistentArrayMap.EMPTY);\n}\n})()))].join(''));\n}\n}\n}catch (e43178){var e_43217 = e43178;\ncom.fulcrologic.guardrails.utils.report_exception(e_43217,\"BUG: Internal error in expound or clojure spec.\\n\");\n}finally {var duration_43218 = (com.fulcrologic.guardrails.core.now_ms() - start_43208);\nif((duration_43218 > (100))){\ncom.fulcrologic.guardrails.utils.report_problem([\"WARNING: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name),\" \",(cljs.core.truth_(args_QMARK_)?\"argument specs\":\"return spec\"),\" took \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(duration_43218),\"ms to run.\"].join(''));\n} else {\n}\n}\nif(cljs.core.truth_(cljs.core.deref(valid_exception_43212))){\nthrow cljs.core.deref(valid_exception_43212);\n} else {\n}\n\nreturn null;\n});\ncom.fulcrologic.guardrails.core.callsite_exception = (function com$fulcrologic$guardrails$core$callsite_exception(){\nreturn (new Error(\"\"));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/guardrails/core.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",36],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$>defn-",["^ ","~:arglists",["~#list",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$gspec","~$prepost-map?","~$body?"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"~:doc","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",780,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","~:name","~$com.fulcrologic.guardrails.core/>defn-","~:ns","~$com.fulcrologic.guardrails.core","~:macro",true],"~$>fdef",["^ ","^I",["^J",[["^K",["^N"],"^O"],["^K",["^J",[["^N"],"^O"]],"~$+"]]],"^R","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",818,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fdef","^U","^V","^W",true],"~$>def",["^ ","^I",["^J",[["~$k","~$spec-form"],["~$k","~$_doc","^["]]],"^R","Just like Clojure s/def, except there is a stub for this in the `noop` namespace, which you can substitute via\n        CLJS build parameters, turning it into code that can be dead-code eliminated in a CLJS production build. See the\n        docstring for the `com.fulcrologic.guardrails.noop` namespace.","^7",802,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>def","^U","^V","^W",true],"~$?",["^ ","^I",["^J",[["~$&","~$forms"]]],"^7",161,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/?","^U","^V","^W",true],"~$>defn",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",768,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>defn","^U","^V","^W",true],"~$with-global-context",["^ ","^I",["^J",[["~$ctx","~$&","~$body"]]],"^R","Wraps the body with an enter and leave global context.\n      Will always call leave as it uses a try finally block.\n      See `enter-global-context!`.","^7",47,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/with-global-context","^U","^V","^W",true],"~$>fn",["^ ","^I",["^J",[["~$&","^12"]]],"^7",836,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fn","^U","^V","^W",true],"~$>fspec",["^ ","^I",["^J",[["~$&","^12"]]],"^7",838,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fspec","^U","^V","^W",true]],"^S","^V","~:reader-aliases",["^ "],"~:op","^U","~:imports",null,"~:requires",["^ ","^>","^?","~$com.fulcrologic.guardrails.impl.externs","^1B","~$async","^A","~$expound.alpha","^1D","~$cljs.core","^1E","~$goog","^1F","^A","^A","^@","^A","~$exp","^1D","~$s","^?","~$string","~$clojure.string","~$com.fulcrologic.guardrails.utils","^1J","~$utils","^1J","^1I","^1I","^?","^?"],"~:seen",["^F",["~:require","~:require-macros"]],"~:uses",null,"^1N",["^ ","^>","^?","^V","^V","^1C","^A","^1E","^1E","^A","^A","^@","^A","~$s","^?","^1J","^1J","^1K","^1J","^?","^?"],"~:form",["^J",["~$ns","^V",["^J",["^1N","^V"]],["^J",["^1M",["^1B"],["^1J","~:as","^1K"],["^@","^1R","^1C"],["^>","^1R","~$s"],["^1I","^1R","^1H"],["^1D","^1R","^1G"]]]]],"~:flags",["^ ","^1N",["^F",[]],"^1M",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^1F","^1E","^1B","^1J","^A","^?","^1I","^1D"]],"^U","^V","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/guardrails/core.cljc"],"~:compiled-at",1656688504949,"^1>",["^ ","^>","^?","^V","^V","^1B","^1B","^1C","^A","^1D","^1D","^1E","^1E","^1F","^1F","^A","^A","^@","^A","^1G","^1D","~$s","^?","^1H","^1I","^1J","^1J","^1K","^1J","^1I","^1I","^?","^?"],"~:resource-name","com/fulcrologic/guardrails/core.cljc","~:warnings",[],"~:source",";; Copyright (c) George Lipov. All rights reserved.\n;; Additional code Copyright Fulcrologic, LLC.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns com.fulcrologic.guardrails.core\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.core))\n  (:require\n    #?@(:clj [[clojure.walk :as walk]\n              [com.fulcrologic.guardrails.config :as gr.cfg]\n              [com.fulcrologic.guardrails.impl.pro :as gr.pro]\n              [com.fulcrologic.guardrails.utils :refer [cljs-env? clj->cljs]]])\n    #?@(:cljs [[com.fulcrologic.guardrails.impl.externs]])\n    [com.fulcrologic.guardrails.utils :as utils]\n    [clojure.core.async :as async]\n    [clojure.spec.alpha :as s]\n    [clojure.string :as string]\n    [expound.alpha :as exp]))\n\n;; It doesn't actually matter what these are bound to, they are stripped by\n;; the macros they're used in and never end up in the final code. This is just\n;; so they can be used without '=> cannot be resolved' errors in the IDE.\n(def => :ret)\n(def | :st)\n(def <- :gen)\n\n\n(def ^:private global-context (atom (list)))\n\n(defn enter-global-context!\n  \"Push a global context, accessible from all threads, onto a stack.\n   Used to add information to what guardrails will report when a function failed a check.\"\n  [ctx]\n  (swap! global-context (partial cons ctx)))\n\n(defn leave-global-context!\n  \"Pops a global context (see `enter-global-context!`).\n   Should be passed the same context that was pushed, although is not enforced, as it's only to be easily compatible with fulcro-spec's hooks API.\"\n  [ctx]\n  (swap! global-context rest))\n\n#?(:clj\n   (defmacro with-global-context\n     \"Wraps the body with an enter and leave global context.\n      Will always call leave as it uses a try finally block.\n      See `enter-global-context!`.\"\n     [ctx & body]\n     `(do (enter-global-context! ~ctx)\n        (try ~@body\n          (finally\n            (leave-global-context! ~ctx))))))\n\n(defn- get-global-context [] (first @global-context))\n\n\n(defonce pending-check-channel (async/chan (async/dropping-buffer 10000)))\n\n(defonce async-go-channel\n  (async/go-loop [check (async/<! pending-check-channel)]\n    (if check\n      (do\n        (try\n          (check)\n          (catch #?(:clj Exception :cljs :default) _))\n        (recur (async/<! pending-check-channel)))\n      (println \"Guardrails ASYNC LOOP STOPPED ****************************************\"))))\n\n;; runtime checking (both clj and cljs\n(defn- output-fn [data]\n  (let [{:keys [level ?err msg_ ?ns-str ?file hostname_\n                timestamp_ ?line]} data]\n    (str\n      (string/upper-case (name level)) \" \"\n      (force msg_)\n      (when-let [err ?err]\n        (str \"\\n\" (utils/stacktrace err))))))\n\n(defn now-ms [] #?(:clj  (System/currentTimeMillis)\n                   :cljs (inst-ms (js/Date.))))\n\n(def tap (resolve 'tap>))\n\n(defn run-check [{:keys [tap>? args? vararg? callsite throw? fn-name expound-opts]} spec value]\n  (let [start           (now-ms)\n        vargs?          (and args? vararg?)\n        varg            (if vargs? (last (seq value)) nil)\n        specable-args   (if vargs?\n                          (if (map? varg)\n                            (into (vec (butlast value)) (flatten (seq varg)))\n                            (into (vec (butlast value)) (seq varg)))\n                          value)\n        valid-exception (atom nil)]\n    (try\n      (when-not (s/valid? spec specable-args)\n        (let [problem     (exp/expound-str spec specable-args expound-opts)\n              description (str\n                            \"\\n\"\n                            fn-name\n                            (if args? \" argument list\" \" return type\") \"\\n\"\n                            problem)\n              context     (get-global-context)]\n          (when (and tap tap>?)\n            (tap\n              #:com.fulcrologic.guardrails\n              {:_/type        :com.fulcrologic.guardrails/validation-error\n               :fn-name       fn-name\n               :failure-point (if args? :args :ret)\n               :spec          spec\n               :explain-data  (s/explain-data spec specable-args)}))\n          (if throw?\n            (reset! valid-exception\n              (ex-info (cond->> description context\n                         (str \"\\nContext: \" context))\n                (with-meta\n                  #:com.fulcrologic.guardrails\n                      {:_/type        :com.fulcrologic.guardrails/validation-error\n                       :fn-name       fn-name\n                       :failure-point (if args? :args :ret)\n                       :spec          spec\n                       :context       context}\n                  #:com.fulcrologic.guardrails\n                      {:val specable-args})))\n            (utils/report-problem (str description \"\\n\" (utils/stacktrace (or callsite (ex-info \"\" {}))))))))\n      (catch #?(:cljs :default :clj Throwable) e\n        (utils/report-exception e (str \"BUG: Internal error in expound or clojure spec.\\n\")))\n      (finally\n        (let [duration (- (now-ms) start)]\n          (when (> duration 100)\n            (utils/report-problem (str \"WARNING: \" fn-name \" \" (if args? \"argument specs\" \"return spec\") \" took \" duration \"ms to run.\"))))))\n    (when @valid-exception\n      (throw @valid-exception)))\n  nil)\n\n#?(:clj\n   (defn clean-defn\n     \"This removes the gspec and returns a\n     clean defn for use in production builds.\"\n     [op forms]\n     (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n           strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                      (cons args more)))]\n       (->> (if (single-arity? forms)\n              (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n                `(~op ~@head-forms ~@(strip-gspec body-forms)))\n              (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n                `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?)))))\n\n#?(:clj\n   (defn- count-args\n     \"Returns a tuple with the number of regular and non-variadic arguments.\"\n     [conformed-args]\n     [(count (:args conformed-args))\n      (if (:varargs conformed-args) 1 0)]))\n\n#?(:clj\n   (defmacro ? [& forms]\n     (cond-> `(s/nilable ~@forms)\n       (cljs-env? &env) clj->cljs)))\n\n#?(:clj\n   (do\n     (s/def ::defn-macro string?)\n     (s/def ::expound (s/map-of keyword? any?))\n     (s/def ::throw? boolean?)\n\n     (s/def ::guardrails-config\n       (s/keys\n         :opt-un [::defn-macro\n                  ::expound\n                  ::throw?]))\n\n     ;; These are lifted straight from clojure.core.specs.alpha, because it\n     ;; didn't seem possible to access them directly in the original namespace.\n     (s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n     ;; sequential destructuring\n     (s/def ::seq-binding-form\n       (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n           :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n           :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n     ;; map destructuring\n     (s/def ::keys (s/coll-of ident? :kind vector?))\n     (s/def ::syms (s/coll-of symbol? :kind vector?))\n     (s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n     (s/def ::or (s/map-of simple-symbol? any?))\n     (s/def ::as ::local-name)\n\n     (s/def ::map-special-binding\n       (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n     (s/def ::map-binding (s/tuple ::binding-form any?))\n\n     (s/def ::ns-keys\n       (s/tuple\n         (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n         (s/coll-of simple-symbol? :kind vector?)))\n\n     (s/def ::map-bindings\n       (s/every (s/or :mb ::map-binding\n                  :nsk ::ns-keys\n                  :msb (s/tuple #{:as :or :keys :syms :strs} any?))\n         :into {}))\n\n     (s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n     (s/def ::binding-form\n       (s/or :sym ::local-name\n         :seq ::seq-binding-form\n         :map ::map-binding-form))\n\n     ;;; Function and >defn specs\n\n     (s/def ::arg-list\n       (s/and vector?\n         (s/cat :args (s/* ::binding-form)\n           :varargs (s/? (s/cat :amp #{'&} :form ::binding-form)))))\n\n     (s/def ::pred-arg-list\n       (s/and vector?\n         (s/cat :args (s/* (s/or :sym ::local-name)))))\n\n     (s/def ::anon-args+body\n       (s/cat :args ::arg-list\n         :body (s/* any?)))\n\n     (s/def ::anon-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :bs (s/alt :arity-1 ::anon-args+body\n                 :arity-n (s/+ (s/spec ::anon-args+body))))))\n\n     (s/def ::pred-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :args ::pred-arg-list\n           :body any?)))\n\n     (s/def ::spec-elem\n       (s/or :set set?\n         :pred-sym (s/and symbol?\n                     (complement #{'| '=>})\n                     ;; REVIEW: should the `?` be a requirement?\n                     #(string/ends-with? (str %) \"?\"))\n         :gspec (s/or :nilable-gspec ::nilable-gspec :gspec ::gspec)\n         :spec-key qualified-keyword?\n         :fun ::pred-fn\n         :list seq?))\n\n     (s/def ::such-that-op #{:st '|})\n     (s/def ::ret-op #{:ret '=>})\n     (s/def ::gen-op #{:gen '<-})\n\n     (s/def ::gspec\n       (s/and vector?\n         (s/cat :args (s/? (s/cat :args (s/+ ::spec-elem)\n                             :args-such-that (s/? (s/cat :op ::such-that-op\n                                                    :preds (s/+ ::pred-fn)))))\n           :ret-op ::ret-op\n           :ret ::spec-elem\n           :fn-such-that (s/? (s/cat :op ::such-that-op\n                                :preds (s/+ ::pred-fn)))\n           :gen (s/? (s/cat :op ::gen-op\n                       :gen-fn (s/? (some-fn seq? symbol?)))))))\n\n     (s/def ::nilable-gspec\n       (s/and vector?\n         (s/cat :maybe #{'? 's/nilable}\n           :gspec ::gspec)))\n\n     (s/def ::prepost (s/map-of #{:pre :post}\n                        (s/coll-of seq?\n                          :kind vector?\n                          :distinct true)))\n\n     (s/def ::args+body\n       (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                      :body (s/+ any?))\n                 :body (s/* any?))))\n\n     (s/def ::args+gspec+body\n       (s/&\n         (s/cat :args ::arg-list\n           :gspec (s/nilable ::gspec)\n           :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                        :body (s/+ any?))\n                   :body (s/* any?)))\n         (fn arg-specs-match-param-count? [{:keys [args gspec]}]\n           (if-not gspec\n             true\n             (let [argcount  (->> args count-args (apply +))\n                   spec-args (:args gspec)]\n               (if spec-args\n                 (-> spec-args :args count (= argcount))\n                 (= argcount 0)))))))\n\n\n     (s/def ::defn\n       (s/and seq?\n         (s/cat :op #{'defn 'defn-}\n           :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+body\n                 :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                            :attr (s/? map?))))))\n\n     ;;;; Main code generating functions\n\n     (defn- unscrew-vec-unform\n       \"Half-arsed workaround for spec bugs CLJ-2003 and CLJ-2021.\"\n       [unformed-arg]\n       (if-not (sequential? unformed-arg)\n         unformed-arg\n         (let [malformed-seq-destructuring? (every-pred seq? (comp #{:as '&} first))\n               [unformed malformed] (split-with (complement malformed-seq-destructuring?) unformed-arg)]\n           (vec (concat unformed (apply concat malformed))))))\n\n\n     (defn- gspec->fspec*\n       [conformed-arg-list conformed-gspec anon-fspec? multi-arity-args? nilable?]\n       (let [{argspec-def              :args\n              retspec                  :ret\n              fn-such-that             :fn-such-that\n              {:keys [gen-fn] :as gen} :gen}\n             conformed-gspec]\n         (if (and anon-fspec?\n               argspec-def\n               (not gen)\n               (some #{'any?} (-> argspec-def :args vals)))\n           (if nilable? `(s/nilable ifn?) `ifn?)\n           (let [extract-spec\n                 (fn extract-spec [[spec-type spec]]\n                   (if (= spec-type :gspec)\n                     (if (= (key spec) :nilable-gspec)\n                       (gspec->fspec* nil (-> spec val :gspec) true false true)\n                       (gspec->fspec* nil (val spec) true false false))\n                     spec))\n\n                 named-conformed-args\n                 (when argspec-def\n                   (let [all-args     (remove nil? (concat (:args conformed-arg-list)\n                                                     [(-> conformed-arg-list :varargs :form)]))\n                         gen-arg-name (fn [index] (str \"arg\" (inc index)))\n                         gen-name     (fn [index [arg-type arg :as full-arg]]\n                                        (let [arg-name (if-not arg-type\n                                                         (gen-arg-name index)\n                                                         (case arg-type\n                                                           :sym arg\n                                                           :seq (or (-> arg :as :sym)\n                                                                  (gen-arg-name index))\n                                                           :map (or (-> arg :as)\n                                                                  (gen-arg-name index))))]\n                                          [(keyword arg-name) full-arg]))]\n                     (map-indexed gen-name (or (seq all-args)\n                                             (-> argspec-def :args count (repeat nil))))))\n\n                 arg-binding-map\n                 (if-not conformed-arg-list\n                   {}\n                   (if (every? #(= (-> % second key) :sym) named-conformed-args)\n                     `{:keys ~(vec (map #(-> % first name symbol) named-conformed-args))}\n                     (->> named-conformed-args\n                       (map (fn [[arg-key conformed-arg]]\n                              [(->> conformed-arg (s/unform ::binding-form) unscrew-vec-unform)\n                               arg-key]))\n                       (into {}))))\n\n                 process-arg-pred\n                 (fn process-arg-pred [{:keys [name args body]}]\n                   (let [bindings (if-let [anon-arg (some-> args :args first second)]\n                                    (assoc arg-binding-map :as anon-arg)\n                                    arg-binding-map)]\n                     (remove nil? `(fn ~name [~bindings] ~body))))\n\n                 processed-args\n                 (if-not argspec-def\n                   `(s/cat)\n                   (let [wrapped-params (->> argspec-def\n                                          :args\n                                          (map extract-spec)\n                                          (interleave (map first named-conformed-args))\n                                          (cons `s/cat))]\n                     (if-let [args-such-that (:args-such-that argspec-def)]\n                       (->> args-such-that\n                         :preds\n                         (map process-arg-pred)\n                         (list* `s/and wrapped-params))\n                       wrapped-params)))\n\n                 process-ret-pred\n                 (fn process-ret-pred [{:keys [name args body]}]\n                   (let [anon-arg       (some-> args :args first second)\n                         ret-sym        (gensym \"ret__\")\n                         bindings       [{(if multi-arity-args?\n                                            ['_ arg-binding-map]\n                                            arg-binding-map) :args\n                                          ret-sym            :ret}]\n                         processed-body (if anon-arg\n                                          (walk/postwalk-replace {anon-arg ret-sym} body)\n                                          body)]\n                     (remove nil? `(fn ~name ~bindings ~processed-body))))\n\n                 fn-spec\n                 (when fn-such-that\n                   (let [processed-ret-preds (map process-ret-pred (:preds fn-such-that))]\n                     (if (next processed-ret-preds)\n                       (cons `s/and processed-ret-preds)\n                       (first processed-ret-preds))))\n\n                 final-fspec\n                 (concat (when anon-fspec? [`s/fspec])\n                   [:args processed-args]\n                   [:ret (extract-spec retspec)]\n                   (when fn-spec [:fn fn-spec])\n                   (when gen-fn [:gen gen-fn]))]\n             (if nilable? `(s/nilable ~final-fspec) final-fspec)))))\n\n\n\n     ;; TODO make sure we check whether the variadic bodies are legit\n     ;; Can not have more than one\n     ;; Can not have one with more regular args than the variadic one\n     ;; To what extent does the compiler already check this?\n     (let [get-fspecs    (fn [fn-body]\n                           (let [[param-count variadic] (-> fn-body :args count-args)\n                                 gspec (or (:gspec fn-body)\n                                         (s/conform ::gspec\n                                           (vec (concat (repeat param-count 'any?)\n                                                  (when (> variadic 0)\n                                                    `[(s/* any?)])\n                                                  '[=> any?]))))]\n                             [(->> (if (> variadic 0) \"n\" param-count)\n                                (str \"arity-\")\n                                keyword)\n                              (gspec->fspec* (:args fn-body) gspec false true false)]))\n           get-spec-part (fn [part spec]\n                           (->> spec\n                             (drop-while (complement #{part}))\n                             second))]\n       (defn- generate-fspec-body [fn-bodies]\n         (case (key fn-bodies)\n           :arity-1\n           (when-let [gspec (-> fn-bodies val :gspec)]\n             (gspec->fspec* (-> fn-bodies val :args) gspec false false false))\n\n           :arity-n\n           (when (some :gspec (val fn-bodies))\n             (let [fspecs           (map get-fspecs (val fn-bodies))\n                   arg-specs        (mapcat (fn [[arity spec]]\n                                              [arity (or (get-spec-part :args spec) `empty?)])\n                                      fspecs)\n                   fn-param         (gensym \"p1__\")\n                   multi-ret-specs  (when (->> fspecs\n                                            (map #(get-spec-part :ret (second %)))\n                                            distinct\n                                            count\n                                            (not= 1))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity `(s/valid? ~(get-spec-part :ret spec)\n                                                          (:ret ~fn-param))])\n                                        fspecs))\n                   get-fn-clause    (partial get-spec-part :fn)\n                   fn-specs         (when (->> fspecs (map second) (some get-fn-clause))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity (if-let [fn-spec (get-fn-clause spec)]\n                                                         `(s/valid? ~fn-spec ~fn-param)\n                                                         true)])\n                                        fspecs))\n                   ;; NOTE: destructure args and ret in the arg vec\n                   multi-ret-clause (when multi-ret-specs\n                                      `(fn ~'valid-multi-arity-ret? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@multi-ret-specs)))\n                   multi-fn-clause  (when fn-specs\n                                      `(fn ~'valid-multi-arity-fn? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@fn-specs)))]\n               ;; Using s/or here even though s/alt seems to be more common\n               ;; for multi-arity specs in the wild. The spec error reporting\n               ;; is much better and it's immediately clear what didn't match.\n               (concat [:args `(s/or ~@arg-specs)]\n                 (when-not multi-ret-clause\n                   [:ret (get-spec-part :ret (-> fspecs first second))])\n                 (when (or multi-ret-clause multi-fn-clause)\n                   [:fn (if multi-fn-clause\n                          (if multi-ret-clause\n                            `(s/and ~multi-ret-clause ~multi-fn-clause)\n                            multi-fn-clause)\n                          multi-ret-clause)])))))))\n\n     (def ^:private spec-op->type\n       (let [map-prot     \"cljs.core.IMap\"\n             coll-prot    \"cljs.core.ICollection\"\n             ;; Needed because Closure compiler/JS doesn't consider strings seqable\n             seqable-prot \"(cljs.core.ISeqable|string)\"]\n         {'number?      \"number\"\n          'integer?     \"number\"\n          'int?         \"number\"\n          'nat-int?     \"number\"\n          'pos-int?     \"number\"\n          'neg-int?     \"number\"\n          'float?       \"number\"\n          'double?      \"number\"\n          'int-in       \"number\"\n          'double-in    \"number\"\n\n          'string?      \"string\"\n\n          'boolean?     \"boolean\"\n\n          'keys         map-prot\n          'map-of       map-prot\n          'map?         map-prot\n          'merge        map-prot\n\n          'set?         \"cljs.core.ISet\"\n          'vector?      \"cljs.core.IVector\"\n          'tuple        \"cljs.core.IVector\"\n          'seq?         \"cljs.core.ISeq\"\n          'seqable?     seqable-prot\n          'associative? \"cljs.core.IAssociative\"\n          'atom?        \"cljs.core.IAtom\"\n\n          'coll-of      coll-prot\n          'every        coll-prot\n\n          'keyword?     \"cljs.core.Keyword\"\n          'ifn?         \"cljs.core.IFn\"\n          'fn?          \"Function\"}))\n\n     (declare get-gspec-type)\n\n     (defn- get-type [recursive-call conformed-spec-elem]\n       (let [[spec-type spec-def] conformed-spec-elem\n             spec-op\n             ;; REVIEW: This kinda wants to be a multi-method when it grows up.\n             (case spec-type\n               :list (let [op (-> spec-def first name symbol)]\n                       (cond\n                         (#{'nilable '?} op) (concat (->> spec-def\n                                                       second\n                                                       (s/conform ::spec-elem)\n                                                       (get-type true))\n                                               [::nilable])\n                         (#{'* '+} op) (concat (->> spec-def\n                                                 second\n                                                 (s/conform ::spec-elem)\n                                                 (get-type true))\n                                         [::variadic])\n                         (#{'and} op) [(-> spec-def second)] ; TODO\n                         (#{'coll-of 'every} op) [(or (->> spec-def\n                                                        (drop-while (complement #{:kind}))\n                                                        second)\n                                                    op)]\n                         :else [op]))\n               ;;TODO support (some-fn and (s/or\n               :gspec (let [gspec-def (val spec-def)]\n                        (if (= (key spec-def) :nilable-gspec)\n                          [(get-gspec-type (:gspec gspec-def)) ::nilable]\n                          [(get-gspec-type gspec-def)]))\n               :pred-sym [spec-def]\n               [nil])]\n         (if recursive-call\n           spec-op\n           (if-let [js-type (spec-op->type (first spec-op))]\n             (let [modifiers (set (rest spec-op))]\n               (as-> js-type t\n                 (str (if (::nilable modifiers) \"?\" \"!\") t)\n                 (str (when (::variadic modifiers) \"...\") t)))\n             \"*\"))))\n\n\n     (defn- get-gspec-type [conformed-gspec]\n       (let [argspec-def (:args conformed-gspec)\n             args-jstype (if-not argspec-def\n                           \"\"\n                           (->> (-> conformed-gspec :args :args)\n                             (map (partial get-type false))\n                             (string/join \", \")))\n             ret-jstype  (get-type false (:ret conformed-gspec))]\n         (str \"function(\" args-jstype \"): \" ret-jstype)))\n\n     (defn- generate-type-annotations [env conformed-bs]\n       (when (cljs-env? env)\n         (case (key conformed-bs)\n           :arity-1 (when-let [gspec (-> conformed-bs val :gspec)]\n                      {:jsdoc [(str \"@type {\" (get-gspec-type gspec) \"}\")]})\n           ;; REVIEW: There doesn't seem to be a way to get valid annotations for args of\n           ;; multi-arity functions and attempts to just annotate the return value(s) failed\n           ;; as well. It wasn't possible to put together an annotation which was both\n           ;; considered valid and resulted in a successful type check.\n           :arity-n nil #_(when-let [ret-types (as-> (val conformed-bs) x\n                                                 (map #(get-type false (-> % :gspec :ret)) x)\n                                                 (distinct x)\n                                                 (when (not-any? #{\"*\" \"?\"} x) x))]\n                            {:jsdoc [(str \"@return {\" (string/join \"|\" ret-types) \"}\")]}))))\n\n     (defn- generate-fdef\n       [env forms]\n       (let [{[type fn-name] :name bs :bs} (s/conform ::>fdef-args forms)]\n         (case type\n           :sym (let [fdef `(s/fdef ~fn-name ~@(generate-fspec-body bs))]\n                  fdef)\n           :key `(s/def ~fn-name (s/fspec ~@(generate-fspec-body bs))))))))\n\n(defn callsite-exception []\n  #?(:cljs (js/Error. \"\")\n     :clj  (AssertionError. \"\")))\n\n#?(:clj\n   (do\n     (defn- process-defn-body\n       [cfg fspec args+gspec+body]\n       (let [{:keys            [env fn-name]\n              {:keys [throw? tap>?]} :config} cfg\n             {:keys [async-checks?]} env\n             {:keys [args body]} args+gspec+body\n             cljs?         (cljs-env? env)\n             [prepost orig-body-forms] (case (key body)\n                                         :prepost+body [(-> body val :prepost)\n                                                        (-> body val :body)]\n                                         :body [nil (val body)])\n             process-arg   (fn [[arg-type arg]]\n                             (as-> arg arg\n                               (case arg-type\n                                 :sym [arg-type arg]\n                                 :seq [arg-type (update arg :as #(or % {:as :as :sym (gensym \"arg_\")}))]\n                                 :map [arg-type (update arg :as #(or % (gensym \"arg_\")))])))\n             ;; NOTE: usage of extract-arg isn't elegant, there's duplication, refactor\n             extract-arg   (fn [[arg-type arg]]\n                             (case arg-type\n                               :sym arg\n                               :seq (get-in arg [:as :sym])\n                               :map (:as arg)\n                               nil))\n             {:keys [file line]} (if cljs?\n                                   (meta fn-name)\n                                   {:file #?(:clj *file* :cljs \"N/A\")\n                                    :line (some-> env :form meta :line)})\n             unform-arg    #(->> % (s/unform ::binding-form) unscrew-vec-unform)\n             reg-args      (->> args :args (mapv process-arg))\n             arg->sym      #(let [f (into {} [%])]\n                              (or\n                                (:sym f)\n                                (some-> f :seq :as :sym)\n                                (some-> f :map :as)))\n             reg-arg-names (mapv arg->sym reg-args)\n             var-arg       (some-> args :varargs :form process-arg)\n             arg-list      (vec (concat (map unform-arg reg-args)\n                                  (when var-arg ['& (unform-arg var-arg)])))\n             sym-arg-list  (if var-arg\n                             (conj reg-arg-names (arg->sym var-arg))\n                             reg-arg-names)\n             body-forms    orig-body-forms\n             where         (str file \":\" line \" \" fn-name \"'s\")\n             argspec       (gensym \"argspec\")\n             opts          {:fn-name      where\n                            :tap>?        tap>?\n                            :throw?       throw?\n                            :vararg?      (boolean var-arg)\n                            :expound-opts (get (gr.cfg/get-env-config) :expound {})}\n             gosym         (if cljs? 'cljs.core.async/go 'clojure.core.async/go)\n             putsym        (if cljs? 'cljs.core.async/>! 'clojure.core.async/>!)\n             args-check    (if async-checks?\n                             `(let [e# (callsite-exception)]\n                                (~gosym\n                                  (~putsym pending-check-channel (fn [] (when ~argspec (run-check (assoc\n                                                                                                    ~(assoc opts :args? true)\n                                                                                                    :callsite e#)\n                                                                                         ~argspec ~sym-arg-list))))))\n                             `(when ~argspec (run-check ~(assoc opts :args? true) ~argspec ~sym-arg-list)))\n             retspec       (gensym \"retspec\")\n             ret           (gensym \"ret\")\n             ret-check     (if async-checks?\n                             `(let [e# (callsite-exception)]\n                                (~gosym\n                                  (~putsym pending-check-channel (fn [] (when ~retspec (run-check (assoc\n                                                                                                    ~(assoc opts :args? false)\n                                                                                                    :callsite e#) ~retspec ~ret))))))\n                             `(when ~retspec (run-check ~(assoc opts :args? false) ~retspec ~ret)))\n             real-function `(fn ~arg-list ~@body-forms)\n             f             (gensym \"f\")\n             call          (if (boolean var-arg)\n                             `(cond\n                                (map? ~(last sym-arg-list)) (apply ~f ~@(butlast sym-arg-list) (apply concat (last ~sym-arg-list)))\n                                (seq ~(last sym-arg-list)) (apply ~f ~@sym-arg-list)\n                                :else (~f ~@(butlast sym-arg-list)))\n                             `(~f ~@sym-arg-list))]\n         `(~@(remove nil? [arg-list prepost])\n            (let [{~argspec :args ~retspec :ret} ~fspec]\n              ~args-check\n              (let [~f ~real-function\n                    ~ret ~call]\n                ~ret-check\n                ~ret)))))\n\n     (defn- generate-defn\n       [forms private env]\n       (let [conformed-gdefn   (s/conform ::>defn-args forms)\n             fn-bodies         (:bs conformed-gdefn)\n             arity             (key fn-bodies)\n             fn-name           (:name conformed-gdefn)\n             docstring         (:docstring conformed-gdefn)\n             meta-map          (merge (:meta conformed-gdefn)\n                                 (generate-type-annotations env fn-bodies)\n                                 {::guardrails true})\n             ;;; Assemble the config\n             {:keys [defn-macro] :as config} (gr.cfg/merge-config env (meta fn-name) meta-map)\n             defn-sym          (cond defn-macro (with-meta (symbol defn-macro) {:private private})\n                                     private 'defn-\n                                     :else 'defn)\n             ;;; Code generation\n             fdef-body         (generate-fspec-body fn-bodies)\n             fdef              (when fdef-body `(s/fdef ~fn-name ~@fdef-body))\n             individual-arity-fspecs\n                               (map (fn [{:keys [args gspec]}]\n                                      (when gspec\n                                        (gspec->fspec* args gspec true false false)))\n                                 (val fn-bodies))\n\n             process-fn-bodies (fn []\n                                 (let [process-cfg {:env     env\n                                                    :config  config\n                                                    :fn-name fn-name}]\n                                   (case arity\n                                     :arity-1 (->> fn-bodies val (process-defn-body process-cfg `(s/fspec ~@fdef-body)))\n                                     :arity-n (map (partial process-defn-body process-cfg)\n                                                individual-arity-fspecs\n                                                (val fn-bodies)))))\n             main-defn         `(~@(remove nil? [defn-sym fn-name docstring meta-map])\n                                  ~@(process-fn-bodies))]\n         `(do ~fdef (declare ~fn-name) ~main-defn)))\n\n     ;;;; Main macros and public API\n\n     (s/def ::>defn-args\n       (s/and seq?                                          ; REVIEW\n         (s/cat :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 ;; TODO: add tail-attr-map support after this\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defn >defn* [env form body {:keys [private?] :as opts}]\n       (let [cfg    (gr.cfg/get-env-config)\n             mode   (gr.cfg/mode cfg)\n             async? (gr.cfg/async? cfg)]\n         (cond\n           (not cfg) (clean-defn 'defn body)\n           (#{:copilot :pro} mode) `(do (defn ~@body)\n                                        ~(gr.pro/>defn-impl env body opts))\n           (#{:runtime :all} mode)\n           (cond-> (remove nil? (generate-defn body private? (assoc env :form form :async-checks? async?)))\n             (cljs-env? env) clj->cljs\n             (= :all mode) (-> vec (conj (gr.pro/>defn-impl env body opts)) seq)))))\n\n     (defmacro >defn\n       \"Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (>defn* &env &form forms {:private? false}))\n\n     (s/fdef >defn :args ::>defn-args)\n\n     (defmacro >defn-\n       \"Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (>defn* &env &form forms {:private? true}))\n\n     (comment\n       (>defn- test-function [] [=> nil?] nil)\n       (clojure.pprint/pprint (meta #'test-function))\n       (assert (true? (:private (meta #'test-function))))\n\n       (>defn test-function2 [] [=> nil?] nil)\n       (assert (nil? (:private (meta #'test-function2))))\n\n       ,)\n\n     (s/fdef >defn- :args ::>defn-args)\n\n     (defmacro >def\n       \"Just like Clojure s/def, except there is a stub for this in the `noop` namespace, which you can substitute via\n        CLJS build parameters, turning it into code that can be dead-code eliminated in a CLJS production build. See the\n        docstring for the `com.fulcrologic.guardrails.noop` namespace.\"\n       ([k spec-form]\n        (cond-> `(s/def ~k ~spec-form)\n          (cljs-env? &env) clj->cljs))\n       ([k _doc spec-form]\n        `(>def ~k ~spec-form)))\n\n     (s/def ::>fdef-args\n       (s/and seq?                                          ;REVIEW\n         (s/cat :name (s/or :sym symbol? :key qualified-keyword?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defmacro >fdef\n       \"Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). \"\n       {:arglists '([name [params*] gspec]\n                    [name ([params*] gspec) +])}\n       [& forms]\n       (when-let [cfg (gr.cfg/get-env-config)]\n         `(do ~(when (#{:pro :copilot :all} (gr.cfg/mode cfg))\n                 (gr.pro/>fdef-impl &env forms))\n              ~(cond-> (remove nil? (generate-fdef &env forms))\n                 (cljs-env? &env) clj->cljs))))\n\n     (s/fdef >fdef :args ::>fdef-args)\n\n     ;; TODO: clean >fn (no gspec)\n     (defmacro >fn [& forms] `(fn ~@forms))\n\n     (defmacro >fspec [& forms]\n       (gr.pro/>fspec-impl &env forms))))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AA0BA,2CAAA,3CAAKA;AACL,wCAAA,xCAAKC;AACL,wCAAA,xCAAKC;AAGL,AAAeC,iDAAe,AAACC,6CAmhF3B,AAAAgJ;AAjhFJ;;;;6DAAA,7DAAM/I,kIAGHC;AAHH,AAIE,OAACC,mDAAMJ,+CAAe,AAACK,gDAAQC,eAAKH;;AAEtC;;;;6DAAA,7DAAMI,kIAGHJ;AAHH,AAIE,OAACC,mDAAMJ,+CAAeQ;;AAaxB,qDAAA,rDAAOC;AAAP,AAA6B,uBAAA,AAAAC,hBAACC,gCAAOX;;AAGrC,GAAA,QAAAY,gCAAAC,4CAAAC,uDAAAC,4DAAAC;AAAA;AAAA,AAAA,AAASC,wDAAsB,AAACC,mDAAW,gCAAA,hCAACC;;AAE5C,GAAA,QAAAP,gCAAAC,4CAAAC,uDAAAC,4DAAAK;AAAA;AAAA,AAAA,AAASC,mDACP,iBAAAC,mBAAA,AAAAJ,mDAAA;AAAA,AAAA,AAAAK,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAAF,YAAA;IAAAA,kBAAAA;AAAA,AAAA,AAAA,IAAAG,uBAAAH;AAAA,AAAA,CAAAG,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAF,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,OAAAI,4CAAAJ,gBAAA,IAAgCT;;AAAhC,GAAA,CAAAU,oBAAA;AAAA,IAAAI,aAAA,CAAAL,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAM,6CAAAN,gBAAAK;;AAAA,GAAA,CAAAJ,oBAAA;AAAA,IAAAM,aAAA,yGAAA,zGAOKwC;IAPL/C,kBAAAA;AAAA,AAAA,AAAA,IAAAQ,uBAAAR;AAAA,AAAA,CAAAQ,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAP,oBAAA;AAAA,IAAAQ,aAAA,CAAAT,YAAA;IAAAA,kBAAAA;AAAA,AAAA,AAAA,oBAAAS;AAAA,IAAAC,uBAAAV;AAAA,AAAA,CAAAU,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAX;AAAA,AAAA,CAAAW,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAAV,oBAAA;AAAA,IAAAW,aAAA,CAAAZ,YAAA;IAAAS,aAAAG;IAAAZ,kBAAA,iBAAAa,iBAAAb;AAAA,AAAA,CAAAa,eAAA,OAAAJ;;AAAAI;;AAAA,AAAA,AAAA,IAAAC,uBAAAd;AAAA,AAAA,CAAAc,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAb,oBAAA;AAAA,IAAAc,aAAA,CAAAf,YAAA;IAAAS,aAAAM;IAAAf,kBAAA,iBAAAgB,iBAAAhB;AAAA,AAAA,CAAAgB,eAAA,OAAAP;;AAAAO;;AAAA,AAAA,AAAA,IAAAC,uBAAAjB;AAAA,AAAA,CAAAiB,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAhB,oBAAA;AAAA,IAAAiB,IAAA,iBAAAC,iBAAAnB;AAAA,AAAA,CAAAmB,eAAA,OAAA,AAAArC,eAAA,CAAAkB,YAAA;;AAAAmB;;IAAAnB,kBAAAA;AAAA,AAAA,IAAAoB,UAAA,CAAApB,gBAAA;AAAA,AAAA,IAAAqB,uBAAArB;AAAA,AAAA,CAAAqB,qBAAA,OAAAD;;AAAAC;AAAA,AAAA,IAAAC,uBAAAtB;AAAA,AAAA,CAAAsB,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAArB,oBAAA;AAAA,IAAAsB,aAAA,CAAAvB,YAAA;IAAAA,kBAAA,iBAAAwB,iBAAAxB;AAAA,AAAA,CAAAwB,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,OAAApB,4CAAAJ,gBAAA,KAMuBT;;AANvB,GAAA,CAAAU,oBAAA;AAAA,IAAAD,kBAAAA;AAAA,AAAA,AAAA,IAAAyB,uBAAAzB;AAAA,AAAA,CAAAyB,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAxB,oBAAA;AAAA,IAAAyB,aAAA,CAAA1B,YAAA;IAAAA,kBAAA,iBAAA2B,iBAAA3B;AAAA,AAAA,CAAA2B,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,IAAAC,uBAAA5B;AAAA,AAAA,CAAA4B,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAA3B,oBAAA;AAAA,IAAAQ,aAAA,CAAAT,YAAA;IAAAkB,IAAA,iBAAAW,iBAAA7B;AAAA,AAAA,CAAA6B,eAAA,OAAA,AAAAjD,eAAA,KAAA,CAAAoB,YAAA;;AAAA6B;;IAAAC,aAAA,CAAArB,2CAAAA,6CAAAA;IAAAS,QAAA,iBAAAa,iBAAA/B;AAAA,AAAA,CAAA+B,eAAA,OAAA,AAAAjD,eAAA,CAAAkB,YAAA;;AAAA+B;;IAAA/B,kBAAAA;AAAA,AAAA,AAAA,IAAAgC,uBAAAhC;AAAA,AAAA,CAAAgC,qBAAA,OAAAF;;AAAA,CAAAE,qBAAA,OAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;iFAAAjC;;AAAA,AAAA,IAAAmC,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAArC,sBAAAC;AAAA,AAAA,GAAA,AAAAqC,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAxC;AAAA,AAAA,CAAAwC,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAzC,YAAA;AAAA,IAAA0C,uBAAA1C;AAAA,AAAA,CAAA0C,qBAAA,OAAA,AAAAzD,gBAAA,CAAAe,YAAA;;AAAA0C;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAnC;;;;AAAAmC;;;;;wEAAAnC;;;;;iFAAAA;;;;;;;;;IAAA2C,uBAAA,iBAAAC,iBAAA,AAAA9C;AAAA,AAAA,CAAA8C,eAAAC,AAAA,OAAAjD;;AAAAgD;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAA/C;;;AAUF,4CAAA,5CAAOoD,gGAAWC;AAAlB,AACE,IAAAC,aACiCD;IADjCC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAcG;iBAAd,AAAAD,4CAAAF,eAAA,xEAAoBI;WAApB,AAAAF,4CAAAF,eAAA,lEAAyBK;oBAAzB,AAAAH,4CAAAF,eAAA,3EAA8BM;kBAA9B,AAAAJ,4CAAAF,eAAA,zEAAsCO;gBAAtC,AAAAL,4CAAAF,eAAA,vEAA4CQ;iBAA5C,AAAAN,4CAAAF,eAAA,xEACcS;kBADd,AAAAP,4CAAAF,eAAA,zEACyBU;AADzB,AAEE,yDAAA,jDACE,AAACC,0BAAkB,AAACC,eAAKT,wDACzB,AAACU,gBAAMR,OACP,iBAAAS,qBAAeV;AAAf,AAAA,oBAAAU;AAAA,AAAA,UAAAA,NAAWC;AAAX,AACE,QAAA,iDAAU,AAACC,0EAAiBD;;AAD9B;;;;AAGN,yCAAA,zCAAME;AAAN,AACyB,OAACC,kBAAQ,KAAAC;;AAElC,AAAKC,sCAAI,EAAA,QAAAC,iCAAAC,sCAAAC,oCAAA,AAAA,KAAAC,cAAA;AAAA,AAAAC;GAAA,AAAA,iPAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,oDAAA,6DAAA,mDAAA,sDAAA,AAAA,kEAAA,AAAA,yDAAA,AAAA,iBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,MAAA,AAAA,MAAA,AAAA,+DAAA,AAAA,8JAAA,AAAA,6EAAA,EAAAA,mBAAA,AAAA,AAAAA,iCAAA,UAAA;AAET,4CAAA,oDAAAC,hGAAME,yGAA8EQ,KAAKC;AAAzF,AAAA,IAAAV,aAAAD;IAAAC,iBAAA,AAAA1B,4BAAA0B;qBAAA,AAAAzB,4CAAAyB,eAAA,5EAAyBE;kBAAzB,AAAA3B,4CAAAyB,eAAA,zEAA+BG;oBAA/B,AAAA5B,4CAAAyB,eAAA,3EAAqCI;eAArC,AAAA7B,4CAAAyB,eAAA,tEAA6CK;mBAA7C,AAAA9B,4CAAAyB,eAAA,1EAAsDM;cAAtD,AAAA/B,4CAAAyB,eAAA,rEAA6DO;mBAA7D,AAAAhC,4CAAAyB,eAAA,1EAAqEQ;AAArE,AACE,IAAMG,cAAgB,AAACrB;IACjBsB,qBAAgB,iBAAAC,oBAAKV;AAAL,AAAA,oBAAAU;AAAWT;;AAAXS;;;IAChBC,aAAgB,2EAAA,zDAAIF,oBAAO,AAACG,eAAK,AAACnD,cAAI8C;IACtCM,sBAAgB,kBAAIJ,oBACF,EAAI,AAACK,qBAAKH,aACR,AAACI,6CAAK,AAACC,cAAI,AAACC,kBAAQV,QAAQ,AAACW,kBAAQ,AAACzD,cAAIkD,cAC1C,AAACI,6CAAK,AAACC,cAAI,AAACC,kBAAQV,QAAQ,AAAC9C,cAAIkD,cACnCJ;IAClBY,wBAAgB,6CAAA,7CAAC5H;AARvB,AASE,IAAA,AACE,GAAU,AAAC8H,2DAASf,KAAKO;AAAzB;AAAA,AACE,IAAMS,gBAAY,AAACC,wDAAgBjB,KAAKO,oBAAcR;IAChDmB,oBAAY,CAAA,0HAAA,zEAEEpB,SACA,+BAAA,iBAAA,9BAAIJ,+FACJsB;IACdG,gBAAY,AAAC1H;AANnB,AAOE,oBAAM,iBAAA2G,oBAAKpB;AAAL,AAAA,oBAAAoB;AAASX;;AAATW;;;AAAN,AACE,IAAAgB,iBAAA,2CAAA,qDAAA,+HAAA,sHAAA,iQAAA,4GAAA,rXAGkBtB,iIACA,+BAAA,qDAAA,lEAAIJ,6NACJM,8HACA,AAACqB,6BAAerB,KAAKO;AANvC,AAAA,uIAAAa,gEAAAA,tMAACpC,oEAAAA,oFAAAA;;AADH;;AAQA,oBAAIa;AACF,AAACyB,sBAAOT,sBACN,AAACU,gDAAQ,iBAAAC,WAASN;AAAT,AAAA,oBAAqBC;AACnB,QAAA,yEAAAK,fAAmBL;;AADrBK;;KAEP,oBAAA,2CAAA,qDAAA,+HAAA,sHAAA,iQAAA,4GAAA,oIAAA,2CAAA,r4BAACC,iWAGqB3B,iIACA,+BAAA,qDAAA,lEAAIJ,6NACJM,mHACAmB,sKAEVZ;;AAChB,AAACmB,gDAAqB,mBAAA,lBAAKR,mEAAiB,AAACtC,0EAAiB,iBAAA+C,mBAAI/B;AAAJ,AAAA,oBAAA+B;AAAAA;;AAAa,uDAAA,GAAA,nDAACJ;;;;;gBA9BpF,cAAAT,VA+B2Cc;AA/B3C,AAgCI,AAACC,kDAAuBD,QAAE;UAhC9B,AAkCI,IAAME,iBAAS,CAAG,AAACjD,2CAAQqB;AAA3B,AACE,GAAM,kBAAA,jBAAG4B;AAAT,AACE,AAACJ,gDAAqB,CAAA,iEAAA,mEAAA,qEAAA,jJAAiB5B,aAAY,+BAAA,iBAAA,9BAAIJ,kGAA+CoC;;AADxG;;AAEN,oBAAA,AAAApI,gBAAOmH;AAAP,AACE,MAAA,AAAAnH,gBAAQmH;;AADV;;AA/CJ;;AAihBA,qDAAA,rDAAMkB;AAAN,AACW,YAAAC,MAAA","names",["com.fulcrologic.guardrails.core/=>","com.fulcrologic.guardrails.core/|","com.fulcrologic.guardrails.core/<-","com.fulcrologic.guardrails.core/global-context","cljs.core.atom","com.fulcrologic.guardrails.core/enter-global-context!","ctx","cljs.core.swap_BANG_","cljs.core.partial","cljs.core/cons","com.fulcrologic.guardrails.core/leave-global-context!","cljs.core/rest","com.fulcrologic.guardrails.core/get-global-context","cljs.core/deref","cljs.core/first","js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.core","js/com.fulcrologic.guardrails.core.pending-check-channel","com.fulcrologic.guardrails.core/pending-check-channel","cljs.core.async.chan","cljs.core.async/dropping-buffer","js/com.fulcrologic.guardrails.core.async-go-channel","com.fulcrologic.guardrails.core/async-go-channel","c__38271__auto__","cljs.core.async.impl.dispatch/run","f__38272__auto__","switch__37993__auto__","state_43129","state_val_43130","inst_43125","statearr-43132","cljs.core.async.impl.ioc-helpers/take!","inst_43127","cljs.core.async.impl.ioc-helpers/return-chan","inst_43123","statearr-43133","inst_43106","statearr-43135","statearr-43136","inst_43120","statearr-43138","statearr-43139","inst_43105","statearr-43141","statearr-43142","_","statearr-43143","ex43137","statearr-43145","statearr-43146","inst_43118","statearr-43147","statearr-43149","inst_43109","statearr-43150","statearr-43151","statearr-43152","inst_43115","statearr-43153","statearr-43154","statearr-43155","state-machine__37994__auto__","ret-value__37995__auto__","result__37996__auto__","cljs.core/keyword-identical?","ex__37997__auto__","e43156","statearr-43157","cljs.core/seq","statearr-43158","state__38273__auto__","statearr-43161","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.println","com.fulcrologic.guardrails.core/output-fn","data","map__43164","cljs.core/--destructure-map","cljs.core.get","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","cljs.core/force","temp__5753__auto__","err","com.fulcrologic.guardrails.utils.stacktrace","com.fulcrologic.guardrails.core/now-ms","cljs.core/inst-ms","js/Date","com.fulcrologic.guardrails.core/tap","js/cljs","js/cljs.core","js/cljs.core.tap>","cljs.core/Var","cljs.core/tap>","p__43176","map__43177","com.fulcrologic.guardrails.core/run-check","tap>?","args?","vararg?","callsite","throw?","fn-name","expound-opts","spec","value","start","vargs?","and__5041__auto__","varg","cljs.core/last","specable-args","cljs.core/map?","cljs.core.into","cljs.core/vec","cljs.core/butlast","cljs.core/flatten","valid-exception","e43178","cljs.spec.alpha.valid_QMARK_","problem","expound.alpha.expound_str","description","context","G__43179","cljs.spec.alpha/explain-data","cljs.core/reset!","cljs.core.ex_info","G__43180","cljs.core/with-meta","com.fulcrologic.guardrails.utils/report-problem","or__5043__auto__","e","com.fulcrologic.guardrails.utils/report-exception","duration","com.fulcrologic.guardrails.core/callsite-exception","js/Error","cljs.core/List"]],"~:used-vars",["^F",["~$cljs.core/--destructure-map","~$com.fulcrologic.guardrails.core/leave-global-context!","~$cljs.core/rest","~$com.fulcrologic.guardrails.core/async-go-channel","~$clojure.string/upper-case","~$js/Date","~$cljs.core/partial","~$js/com.fulcrologic.guardrails.core.async-go-channel","~$com.fulcrologic.guardrails.core/global-context","~$com.fulcrologic.guardrails.core/=>","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","~$cljs.core/last","~$cljs.core/keyword-identical?","~$cljs.core/atom","~$com.fulcrologic.guardrails.core/callsite-exception","~$js/com.fulcrologic.guardrails","~$js/com.fulcrologic.guardrails.core","~$cljs.core/Var","~$com.fulcrologic.guardrails.core/output-fn","~$cljs.core.async.impl.ioc-helpers/take!","~$cljs.spec.alpha/explain-data","~$cljs.core/inst-ms","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$com.fulcrologic.guardrails.core/get-global-context","~$cljs.core/with-meta","~$js/cljs","~$js/com.fulcrologic","~$cljs.core.async.impl.dispatch/run","~$com.fulcrologic.guardrails.core/pending-check-channel","~$cljs.core/tap>","~$cljs.core/List","~$cljs.core/swap!","~$cljs.core.async/chan","~$cljs.core.async/dropping-buffer","~$cljs.core/get","~$cljs.core/flatten","~$cljs.core.async.impl.ioc-helpers/USER-START-IDX","~$js/com","~$js/cljs.core","~$com.fulcrologic.guardrails.core/enter-global-context!","~$cljs.spec.alpha/valid?","~$cljs.core/ex-info","~$cljs.core/force","~$cljs.core/println","~$cljs.core/vec","~$cljs.core.async.impl.ioc-helpers/return-chan","~$com.fulcrologic.guardrails.core/now-ms","~$com.fulcrologic.guardrails.core/tap","~$cljs.core/cons","~$expound.alpha/expound-str","~$cljs.core/first","~$cljs.core/butlast","~$com.fulcrologic.guardrails.utils/stacktrace","~$com.fulcrologic.guardrails.core/<-","~$js/cljs.core.tap>","~$com.fulcrologic.guardrails.core/run-check","~$cljs.core/name","~$com.fulcrologic.guardrails.utils/report-problem","~$com.fulcrologic.guardrails.core/|","~$js/Error","~$com.fulcrologic.guardrails.utils/report-exception","~$js/com.fulcrologic.guardrails.core.pending-check-channel"]]],"~:cache-keys",["~#cmap",[["^1W","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^1F","~$goog.dom.HtmlElement"]]],["^1W","cljs/core/async/impl/ioc_helpers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$cljs.core.async.impl.protocols"]]],["^1W","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1W","expound/util.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^?"]]],["^1W","cljs/core/async.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^3T","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1W","cljs/spec/gen/alpha.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$goog.Uri"]]],["^1W","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.asserts"]]],["^1W","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.string"]]],["^1W","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^40","~$goog.object","^3V","^3U"]]],["^1W","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3U"]]],["^1W","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42"]]],["^1W","expound/problems.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$expound.paths","^?"]]],["^1W","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3V","~$goog.reflect","^3U"]]],["^1W","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","com/fulcrologic/guardrails/utils.cljc"],["9ef91f8ca04cc8d2757fb5704e0d3fb96117e65e","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$clojure.walk"]]],["^1W","cljs/pprint.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^1I","^43","~$goog.string.StringBuffer"]]],["^1W","expound/alpha.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$expound.problems","^?","^1I","~$clojure.set","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1W","com/fulcrologic/guardrails/core.cljc"],["9ef91f8ca04cc8d2757fb5704e0d3fb96117e65e","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^1B","^1J","^A","^?","^1I","^1D"]]],["^1W","expound/ansi.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^1I"]]],["^1W","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42"]]],"~:SHADOW-TIMESTAMP",[1655454131000,1655454131000,1654064059000],["^1W","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","^4?"]]],["^1W","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","~$goog.fs.blob","^45","~$goog.html.SafeScript","~$goog.html.trustedtypes","^47","^48","^49","^4:"]]],["^1W","cljs/core/async/impl/channels.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^3T","^3Z","^3X"]]],["^1W","com/fulcrologic/guardrails/registry.cljc"],["9ef91f8ca04cc8d2757fb5704e0d3fb96117e65e","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E"]]],["^1W","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","cljs/core/async/impl/dispatch.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^3X","~$goog.async.nextTick"]]],["^1W","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^49","~$goog.html.SafeUrl","^4:","^42","^3U"]]],["^1W","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4I","~$goog.html.SafeStyle","^4L","^46","~$goog.html.uncheckedconversions","^49","^3U"]]],["^1W","expound/paths.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^?","^4E"]]],["^1W","clojure/walk.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E"]]],["^1W","cljs/core/async/impl/protocols.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E"]]],["^1W","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^49","^47","^48","^4I","^4P","~$goog.html.SafeStyleSheet","^4L","~$goog.dom.TagName","^46","^4:","^42","^4<","^40","^44","^3U","~$goog.dom.tags","^4J"]]],["^1W","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^44"]]],["^1W","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^40","^3U","^3V"]]],["^1W","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^40","^42","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4S","~$goog.dom.safe","^4O","^4Q","~$goog.math.Coordinate","~$goog.math.Size","^44","^43","^49","~$goog.string.Unicode","~$goog.userAgent"]]],["^1W","com/fulcrologic/guardrails/impl/externs.cljc"],["9ef91f8ca04cc8d2757fb5704e0d3fb96117e65e","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","~$com.fulcrologic.guardrails.registry","^1J"]]],["^1W","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.debug.Error","^4V"]]],["^1W","cljs/core/async/impl/buffers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^3T"]]],["^1W","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^40","^42","~$goog.collections.maps","^43","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1W","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","cljs/core/async/impl/timers.cljs"],["134b1e0eac15fdd1718f8a8ddacbb0902961558f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^3T","^3W","^3Z"]]],["^1W","cljs/spec/alpha.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^44","^4@","~$cljs.spec.gen.alpha","^1I"]]],["^1W","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",[]]],["^1W","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^40","^44"]]],["^1W","clojure/string.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^43","^4A"]]],["^1W","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42"]]],["^1W","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^4W","^4Q","^49","^3U"]]],["^1W","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.labs.userAgent","^3U"]]],["^1W","expound/printer.cljc"],["5294f6b31a2cfa6ffbe5021d9390c738fb471927","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E","^1I","^?","^C","^4C","^4E","^4F","^4;","^4@","~$goog.string.format","^43"]]],["^1W","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.math"]]],["^1W","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.debug.entryPointRegistry","~$goog.dom","^4S","^4N","^4<","^4="]]],["^1W","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","^4O","^4I","^4P","^4R","^4L","^46","^49","^3U","^47"]]],["^1W","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F"]]],["^1W","cljs/core.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","~$goog.math.Long","~$goog.math.Integer","^43","^44","^40","^41","^4A"]]],["^1W","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^49","^4:","^4J","^42"]]],["^1W","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^49","^4P","^4:","^44","^42","^3U"]]],["^1W","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^4?"]]],["^1W","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^4["]]],["^1W","clojure/set.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^1E"]]],["^1W","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","^43"]]],["^1W","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3O",["^ ","^3P",null,"^3Q",["^F",[]],"^3R",["^1F","^42","^4:"]]]]],"~:clj-info",["^ ","jar:file:/home/pushkar/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1653101298000,"jar:file:/home/pushkar/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1653101298000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/core.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/registry.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/data/json.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map/base64_vlq.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/mutex.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/exec/threadpool.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/util.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/utils.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map/base64.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/impl/parser.clj",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/concurrent.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1653123568000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/passes/and_or.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/env.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/printer.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/spec/gen/alpha.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/channels.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/pprint.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/js_deps.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/ansi.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm/utils.clj",1653132171000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/spec/alpha.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/core.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1653123568000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/compiler.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async/impl/ioc_macros.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/ioc_macros.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/passes.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/util.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1653123568000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/problems.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1655451982000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/instant.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/protocols.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/impl.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/buffers.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/dispatch.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/alpha.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1653123568000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/config.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/externs.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/cljs/core/async.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/impl/namespaces.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/expound/expound/0.9.0/expound-0.9.0.jar!/expound/paths.cljc",1653132183000,"jar:file:/home/pushkar/.m2/repository/org/clojure/core.async/1.5.648/core.async-1.5.648.jar!/clojure/core/async/impl/timers.clj",1653132170000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.2/tools.analyzer.jvm-1.2.2.jar!/clojure/tools/analyzer/jvm.clj",1653132171000,"jar:file:/home/pushkar/.m2/repository/com/fulcrologic/guardrails/1.1.11/guardrails-1.1.11.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1654064023000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/tagged_literals.cljc",1654064059000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",10,"^8",5,"^9",10,"^:",36],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G",["^ ","^H",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",780,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^T","^U","^V","^W",true],"^X",["^ ","^I",["^J",[["^K",["^N"],"^O"],["^K",["^J",[["^N"],"^O"]],"~$+"]]],"^R","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",818,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^Y","^U","^V","^W",true],"^Z",["^ ","^I",["^J",[["~$k","^["],["~$k","^10","^["]]],"^R","Just like Clojure s/def, except there is a stub for this in the `noop` namespace, which you can substitute via\n        CLJS build parameters, turning it into code that can be dead-code eliminated in a CLJS production build. See the\n        docstring for the `com.fulcrologic.guardrails.noop` namespace.","^7",802,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^11","^U","^V","^W",true],"~$?",["^ ","^I",["^J",[["~$&","^12"]]],"^7",161,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","^13","^U","^V","^W",true],"^14",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",768,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^15","^U","^V","^W",true],"^16",["^ ","^I",["^J",[["^17","~$&","^18"]]],"^R","Wraps the body with an enter and leave global context.\n      Will always call leave as it uses a try finally block.\n      See `enter-global-context!`.","^7",47,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","^19","^U","^V","^W",true],"^1:",["^ ","^I",["^J",[["~$&","^12"]]],"^7",836,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^1;","^U","^V","^W",true],"^1<",["^ ","^I",["^J",[["~$&","^12"]]],"^7",838,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^1=","^U","^V","^W",true]],"^S","^V","^1>",["^ "],"^1@",null,"^1A",["^ ","^>","^?","^1B","^1B","^1C","^A","^1D","^1D","^1E","^1E","^1F","^1F","^A","^A","^@","^A","^1G","^1D","~$s","^?","^1H","^1I","^1J","^1J","^1K","^1J","^1I","^1I","^?","^?"],"^1L",["^F",["^1M","^1N"]],"~:shadow/js-access-global",["^F",["Date","Error"]],"^1O",null,"~:defs",["^ ","~$enter-global-context!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",34,"^8",7,"^9",34,"^:",28,"^I",["^J",["~$quote",["^J",[["^17"]]]]],"^R","Push a global context, accessible from all threads, onto a stack.\n   Used to add information to what guardrails will report when a function failed a check."],"^S","^36","^6","com/fulcrologic/guardrails/core.cljc","^:",28,"~:method-params",["^J",[["^17"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^8",1,"~:variadic?",false,"^7",34,"~:ret-tag",["^F",[null,"~$any"]],"^9",34,"~:max-fixed-arity",1,"~:fn-var",true,"^I",["^J",["^78",["^J",[["^17"]]]]],"^R","Push a global context, accessible from all threads, onto a stack.\n   Used to add information to what guardrails will report when a function failed a check."],"~$tap",["^ ","^S","^3>","^6","com/fulcrologic/guardrails/core.cljc","^7",85,"^8",1,"^9",85,"^:",9,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",85,"^8",6,"^9",85,"^:",9],"~:tag",["^F",["^2J","~$clj-nil"]]],"~$now-ms",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",82,"^8",7,"^9",82,"^:",13,"^I",["^J",["^78",["^J",[[]]]]]],"^S","^3=","^6","com/fulcrologic/guardrails/core.cljc","^:",13,"^79",["^J",[[]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",82,"^7=","^7>","^9",82,"^7?",0,"^7@",true,"^I",["^J",["^78",["^J",[[]]]]]],"~$<-",["^ ","^S","^3D","^6","com/fulcrologic/guardrails/core.cljc","^7",29,"^8",1,"^9",29,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",29,"^8",6,"^9",29,"^:",8],"^7B","~$cljs.core/Keyword"],"~$run-check",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",87,"^8",7,"^9",87,"^:",16,"^I",["^J",["^78",["^J",[[["^ ","~:keys",["~$tap>?","~$args?","~$vararg?","~$callsite","~$throw?","~$fn-name","~$expound-opts"]],"~$spec","~$value"]]]]]],"^S","^3F","^6","com/fulcrologic/guardrails/core.cljc","^:",16,"^79",["^J",[["~$p__43176","^7P","^7Q"]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",87,"^7=","^7C","^9",87,"^7?",3,"^7@",true,"^I",["^J",["^78",["^J",[[["^ ","^7H",["^7I","^7J","^7K","^7L","^7M","^7N","^7O"]],"^7P","^7Q"]]]]]],"~$|",["^ ","^S","^3I","^6","com/fulcrologic/guardrails/core.cljc","^7",28,"^8",1,"^9",28,"^:",7,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",28,"^8",6,"^9",28,"^:",7],"^7B","^7F"],"~$pending-check-channel",["^ ","^S","^2W","^6","com/fulcrologic/guardrails/core.cljc","^7",60,"^8",1,"^9",60,"^:",31,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",60,"^8",10,"^9",60,"^:",31],"^7B","^7>"],"~$async-go-channel",["^ ","^S","^2:","^6","com/fulcrologic/guardrails/core.cljc","^7",62,"^8",1,"^9",62,"^:",26,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",62,"^8",10,"^9",62,"^:",26],"^7B","^7>"],"~$leave-global-context!",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",40,"^8",7,"^9",40,"^:",28,"^I",["^J",["^78",["^J",[["^17"]]]]],"^R","Pops a global context (see `enter-global-context!`).\n   Should be passed the same context that was pushed, although is not enforced, as it's only to be easily compatible with fulcro-spec's hooks API."],"^S","^28","^6","com/fulcrologic/guardrails/core.cljc","^:",28,"^79",["^J",[["^17"]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",40,"^7=",["^F",[null,"^7>"]],"^9",40,"^7?",1,"^7@",true,"^I",["^J",["^78",["^J",[["^17"]]]]],"^R","Pops a global context (see `enter-global-context!`).\n   Should be passed the same context that was pushed, although is not enforced, as it's only to be easily compatible with fulcro-spec's hooks API."],"~$global-context",["^ ","^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",32,"^8",16,"^9",32,"^:",30,"~:private",true],"^7W",true,"^S","^2?","^6","com/fulcrologic/guardrails/core.cljc","^:",30,"^8",1,"^7",32,"^9",32,"^7B","~$cljs.core/Atom"],"~$=>",["^ ","^S","^2@","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",1,"^9",27,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",6,"^9",27,"^:",8],"^7B","^7F"],"~$callsite-exception",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",616,"^8",7,"^9",616,"^:",25,"^I",["^J",["^78",["^J",[[]]]]]],"^S","^2G","^6","com/fulcrologic/guardrails/core.cljc","^:",25,"^79",["^J",[[]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",616,"^7=","^3J","^9",616,"^7?",0,"^7@",true,"^I",["^J",["^78",["^J",[[]]]]]],"~$get-global-context",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",57,"^8",8,"^9",57,"^:",26,"^7W",true,"^I",["^J",["^78",["^J",[[]]]]]],"^7W",true,"^S","^2R","^6","com/fulcrologic/guardrails/core.cljc","^:",26,"^79",["^J",[[]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",57,"^7=",["^F",["^7>","^7C"]],"^9",57,"^7?",0,"^7@",true,"^I",["^J",["^78",["^J",[[]]]]]],"~$output-fn",["^ ","^77",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",73,"^8",8,"^9",73,"^:",17,"^7W",true,"^I",["^J",["^78",["^J",[["~$data"]]]]]],"^7W",true,"^S","^2K","^6","com/fulcrologic/guardrails/core.cljc","^:",17,"^79",["^J",[["^81"]]],"^7:",null,"^7;",["^J",[null,null]],"^8",1,"^7<",false,"^7",73,"^7=","^1H","^9",73,"^7?",1,"^7@",true,"^I",["^J",["^78",["^J",[["^81"]]]]]]],"^1N",["^ ","^>","^?","^V","^V","^1C","^A","^1E","^1E","^A","^A","^@","^A","~$s","^?","^1J","^1J","^1K","^1J","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1L",["^F",["~:args","~$x","~:ret","~:throw?","~:com.fulcrologic.guardrails/validation-error","~$boolean","~:args?","~:else","~:gen","~:callsite","~:msg_","^U","^S","^1E","^6","^:","~:com.fulcrologic.guardrails/context","~:?file","~:fn-name","~:recur","~:type","~:hostname_","~:?ns-str","~:com.fulcrologic.guardrails/failure-point","^8","^2X","~:com.fulcrologic.guardrails/fn-name","~:level","~:com.fulcrologic.guardrails/explain-data","~:vararg?","^7","~:?err","~:st","~$tap>","~:tap>?","^9","~:cljs.analyzer/no-resolve","~:timestamp_","~:?line","~:com.fulcrologic.guardrails/val","^7B","~:expound-opts","^I","^R","~:com.fulcrologic.guardrails/spec","~:test"]],"~:order",["^84","^8J","^8:","^8@","^89","^8F","^8I","^8<","^8C","^8>","^8B","^8N","^8O","^2X","^8M","^U","^S","^6","^:","^8","^7","^9","^7B","^I","^R","^8S","^1E","^8K","^87","~$x","^8L","^88","^8H","^8;","^85","^8?","^8Q","^8A","^8E","^8D","^8R","^8G","^86","^83","^8=","^8P"]],"^1S",["^ ","^1N",["^F",[]],"^1M",["^F",[]]],"^1T",["^ "],"^1U",["^1F","^1E","^1B","^1J","^A","^?","^1I","^1D"]],"^U","^V","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^3N",[["^8W","~:static-fns"],true,["^8W","~:shadow-tweaks"],null,["^8W","~:source-map-inline"],null,["^8W","~:elide-asserts"],false,["^8W","~:optimize-constants"],null,["^8W","^1Z"],null,["^8W","~:external-config"],null,["^8W","~:tooling-config"],null,["^8W","~:emit-constants"],null,["^8W","~:load-tests"],null,["^8W","~:form-size-threshold"],null,["^8W","~:global-goog-object&array"],null,["^8W","~:data-readers"],null,["^8W","~:infer-externs"],"~:auto",["^8W","^20"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8W","~:fn-invoke-direct"],null,["^8W","~:source-map"],"/dev/null"]]]