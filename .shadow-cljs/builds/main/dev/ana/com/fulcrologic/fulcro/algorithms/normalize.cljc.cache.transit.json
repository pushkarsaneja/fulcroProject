["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.normalize');\n/**\n * Insert or merge a data entity into a state table under the given `ident`.\n *   A better version of `(update-in state ident merge entity-map)`.\n *   Ex.: `(upsert-ident {} [:person/id 1] #:person{:id 1 :age 42}) => {:person/id {1 #:person{:id 1, :age 42}}}`\n */\ncom.fulcrologic.fulcro.algorithms.normalize.upsert_ident = (function com$fulcrologic$fulcro$algorithms$normalize$upsert_ident(state,ident,entity_map){\ntry{return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(state,ident,cljs.core.merge,entity_map);\n}catch (e44858){var e = e44858;\nif(cljs.core.map_QMARK_(entity_map)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Query join indicates the data should contain a data map but the actual data is \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([entity_map], 0)),\" Joined component's ident: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ident)].join(''),cljs.core.PersistentArrayMap.EMPTY);\n}\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3([\"Insert/update of the presumed data entity \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([entity_map], 0)),\" into the state at \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ident),\" failed due to: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(e)].join(''),cljs.core.PersistentArrayMap.EMPTY,e);\n}});\ncom.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_ = (function com$fulcrologic$fulcro$algorithms$normalize$normalize_STAR_(query,data,tables,union_seen,transform){\nvar data__$1 = (cljs.core.truth_((function (){var and__5041__auto__ = transform;\nif(cljs.core.truth_(and__5041__auto__)){\nreturn (!(cljs.core.vector_QMARK_(data)));\n} else {\nreturn and__5041__auto__;\n}\n})())?(transform.cljs$core$IFn$_invoke$arity$2 ? transform.cljs$core$IFn$_invoke$arity$2(query,data) : transform.call(null,query,data)):data);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"*\",\"*\",345799209,null)], null),query)){\nreturn data__$1;\n} else {\nif(cljs.core.map_QMARK_(query)){\nvar class$ = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(query));\nvar ident = com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(class$,data__$1);\nif((!((ident == null)))){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4((function (){var G__44864 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(query,cljs.core.first(ident));\nvar G__44865 = data__$1;\nvar G__44866 = tables;\nvar G__44867 = union_seen;\nvar G__44868 = transform;\nreturn (com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5 ? com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5(G__44864,G__44865,G__44866,G__44867,G__44868) : com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.call(null,G__44864,G__44865,G__44866,G__44867,G__44868));\n})(),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.normalize\",\"tag\",\"com.fulcrologic.fulcro.algorithms.normalize/tag\",313912943),cljs.core.first(ident));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Union components must have an ident\",cljs.core.PersistentArrayMap.EMPTY);\n}\n} else {\nif(cljs.core.vector_QMARK_(data__$1)){\nreturn data__$1;\n} else {\nvar q = cljs.core.seq(query);\nvar ret = data__$1;\nwhile(true){\nif((!((q == null)))){\nvar expr = cljs.core.first(q);\nif(com.fulcrologic.fulcro.algorithms.do_not_use.join_QMARK_(expr)){\nvar vec__44911 = com.fulcrologic.fulcro.algorithms.do_not_use.join_entry(expr);\nvar join_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44911,(0),null);\nvar subquery = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44911,(1),null);\nvar recursive_QMARK_ = com.fulcrologic.fulcro.algorithms.do_not_use.recursion_QMARK_(subquery);\nvar union_entry = ((com.fulcrologic.fulcro.algorithms.do_not_use.union_QMARK_(expr))?subquery:union_seen);\nvar subquery__$1 = ((recursive_QMARK_)?(((!((union_seen == null))))?union_seen:query):subquery);\nvar class$ = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(subquery__$1));\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(data__$1,join_key);\nif(((recursive_QMARK_) && (edn_query_language.core.ident_QMARK_(v)))){\nvar G__45002 = cljs.core.next(q);\nvar G__45003 = ret;\nq = G__45002;\nret = G__45003;\ncontinue;\n} else {\nif(cljs.core.map_QMARK_(v)){\nvar x = (com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5 ? com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5(subquery__$1,v,tables,union_entry,transform) : com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.call(null,subquery__$1,v,tables,union_entry,transform));\nif((!((((class$ == null)) || ((!(com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(class$)))))))){\nvar i = com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(class$,x);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(tables,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(i),cljs.core.second(i)], null),cljs.core.merge,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n\nvar G__45004 = cljs.core.next(q);\nvar G__45005 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,join_key,i);\nq = G__45004;\nret = G__45005;\ncontinue;\n} else {\nvar G__45006 = cljs.core.next(q);\nvar G__45007 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,join_key,x);\nq = G__45006;\nret = G__45007;\ncontinue;\n}\n} else {\nif(((cljs.core.vector_QMARK_(v)) && ((((!(edn_query_language.core.ident_QMARK_(v)))) && ((!(edn_query_language.core.ident_QMARK_(cljs.core.first(v))))))))){\nvar xs = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (q,ret,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function (p1__44860_SHARP_){\nreturn (com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5 ? com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.cljs$core$IFn$_invoke$arity$5(subquery__$1,p1__44860_SHARP_,tables,union_entry,transform) : com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_.call(null,subquery__$1,p1__44860_SHARP_,tables,union_entry,transform));\n});})(q,ret,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n),v);\nif((!((((class$ == null)) || ((!(com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(class$)))))))){\nvar is = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (q,ret,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function (p1__44861_SHARP_){\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(class$,p1__44861_SHARP_);\n});})(q,ret,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n),xs);\nif(cljs.core.vector_QMARK_(subquery__$1)){\nif(cljs.core.empty_QMARK_(is)){\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(tables,((function (q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function (tables_SINGLEQUOTE_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function com$fulcrologic$fulcro$algorithms$normalize$normalize_STAR__$_merge_to_client_db(state,p__44952){\nvar vec__44954 = p__44952;\nvar ident = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44954,(0),null);\nvar entity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44954,(1),null);\nreturn com.fulcrologic.fulcro.algorithms.normalize.upsert_ident(state,ident,entity);\n});})(q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n,tables_SINGLEQUOTE_,cljs.core.zipmap(is,xs));\n});})(q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n);\n}\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(tables,((function (q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function (tables_SINGLEQUOTE_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1){\nreturn (function com$fulcrologic$fulcro$algorithms$normalize$normalize_STAR__$_merge_to_client_db(state,p__44957){\nvar vec__44959 = p__44957;\nvar ident = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44959,(0),null);\nvar entity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44959,(1),null);\nreturn com.fulcrologic.fulcro.algorithms.normalize.upsert_ident(state,ident,entity);\n});})(q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n,tables_SINGLEQUOTE_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,is,xs));\n});})(q,ret,is,xs,vec__44911,join_key,subquery,recursive_QMARK_,union_entry,subquery__$1,class$,v,expr,data__$1))\n);\n}\n\nvar G__45008 = cljs.core.next(q);\nvar G__45009 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,join_key,is);\nq = G__45008;\nret = G__45009;\ncontinue;\n} else {\nvar G__45010 = cljs.core.next(q);\nvar G__45011 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,join_key,xs);\nq = G__45010;\nret = G__45011;\ncontinue;\n}\n} else {\nif((v == null)){\nvar G__45012 = cljs.core.next(q);\nvar G__45013 = ret;\nq = G__45012;\nret = G__45013;\ncontinue;\n} else {\nvar G__45014 = cljs.core.next(q);\nvar G__45015 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,join_key,v);\nq = G__45014;\nret = G__45015;\ncontinue;\n\n}\n}\n}\n}\n} else {\nvar k = ((cljs.core.seq_QMARK_(expr))?cljs.core.first(expr):expr);\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(data__$1,k);\nif((v == null)){\nvar G__45016 = cljs.core.next(q);\nvar G__45017 = ret;\nq = G__45016;\nret = G__45017;\ncontinue;\n} else {\nvar G__45018 = cljs.core.next(q);\nvar G__45019 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,k,v);\nq = G__45018;\nret = G__45019;\ncontinue;\n}\n}\n} else {\nreturn ret;\n}\nbreak;\n}\n\n}\n}\n}\n});\ncom.fulcrologic.fulcro.algorithms.normalize.better_normalize_STAR_ = (function com$fulcrologic$fulcro$algorithms$normalize$better_normalize_STAR_(query,data,tables,union_seen,transform){\ntry{return com.fulcrologic.fulcro.algorithms.normalize.normalize_STAR_(query,data,tables,union_seen,transform);\n}catch (e44968){var e = e44968;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.normalize\",null,134,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Normalize failed and no data will be inserted into the client DB. Error:\",cljs.core.ex_message(e),(function (){var temp__5751__auto__ = (function (){var G__44971 = query;\nvar G__44971__$1 = (((G__44971 == null))?null:cljs.core.meta(G__44971));\nvar G__44971__$2 = (((G__44971__$1 == null))?null:new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__44971__$1));\nif((G__44971__$2 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.raw.components.component_name(G__44971__$2);\n}\n})();\nif(cljs.core.truth_(temp__5751__auto__)){\nvar class$ = temp__5751__auto__;\nreturn [\"Target component: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$)].join('');\n} else {\nreturn [\"Query: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query)].join('');\n}\n})(),\"Data: \",data], null);\n}),null)),null,-202357103,null);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\n/**\n * Given a component class or instance and a tree of data, use the component's\n * query to transform the tree into the default database format. All nodes that\n * can be mapped via Ident implementations wil be replaced with ident links. The\n * original node data will be moved into tables indexed by ident. If merge-idents\n * option is true, will return these tables in the result instead of as metadata.\n */\ncom.fulcrologic.fulcro.algorithms.normalize.tree__GT_db = (function com$fulcrologic$fulcro$algorithms$normalize$tree__GT_db(var_args){\nvar G__44978 = arguments.length;\nswitch (G__44978) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$2 = (function (x,data){\nreturn com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3(x,data,false);\n}));\n\n(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3 = (function (x,data,merge_idents){\nreturn com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4(x,data,merge_idents,null);\n}));\n\n(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4 = (function (x,data,merge_idents,transform){\nvar tables = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar x__$1 = ((cljs.core.vector_QMARK_(x))?x:com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(x,data));\nvar ret = com.fulcrologic.fulcro.algorithms.normalize.better_normalize_STAR_(x__$1,data,tables,null,transform);\nif(merge_idents){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ret,cljs.core.deref(tables)], 0));\n} else {\nreturn cljs.core.with_meta(ret,cljs.core.deref(tables));\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$lang$maxFixedArity = 4);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Functions for dealing with normalizing Fulcro databases. In particular `tree->db`.","~:file","com/fulcrologic/fulcro/algorithms/normalize.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",48],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.normalize","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$edn-query-language.core","^O","~$log","~$taoensso.timbre","~$eql","^O","~$cljs.core","^S","~$rc","~$com.fulcrologic.fulcro.raw.components","~$goog","^V","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","^Q","^Q","^U","^U","^X","^X"],"~:seen",["^G",["~:require"]],"~:uses",["^ ","~$has-ident?","^U","~$get-ident","^U","~$get-query","^U"],"~:require-macros",["^ ","^S","^S","^P","^Q","^Q","^Q"],"~:form",["~#list",["~$ns","^I","Functions for dealing with normalizing Fulcro databases. In particular `tree->db`.",["^15",["^Z",["^X","~:as","^W"],["^O","^17","^R"],["^Q","^17","^P"],["^U","^17","^T","~:refer",["^10","^11","^12"]]]]]],"~:flags",["^ ","^Z",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^V","^S","^X","^O","^Q","^U"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/normalize.cljc"],"~:compiled-at",1656688509957,"^J",["^ ","^O","^O","^P","^Q","^R","^O","^S","^S","^T","^U","^V","^V","^W","^X","^Q","^Q","^U","^U","^X","^X"],"~:resource-name","com/fulcrologic/fulcro/algorithms/normalize.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.normalize\n  \"Functions for dealing with normalizing Fulcro databases. In particular `tree->db`.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.fulcro.raw.components :as rc :refer [has-ident? get-ident get-query]]))\n\n(defn- upsert-ident\n  \"Insert or merge a data entity into a state table under the given `ident`.\n  A better version of `(update-in state ident merge entity-map)`.\n  Ex.: `(upsert-ident {} [:person/id 1] #:person{:id 1 :age 42}) => {:person/id {1 #:person{:id 1, :age 42}}}`\"\n  [state ident entity-map]\n  (try\n    (update-in state ident merge entity-map)\n    (catch #?(:clj Exception :cljs :default) e\n      (when-not (map? entity-map)\n        (throw (ex-info (str \"Query join indicates the data should contain a data map but the actual data is \"\n                          (pr-str entity-map)\n                          \" Joined component's ident: \" ident)\n                 {})))\n      (throw (ex-info (str \"Insert/update of the presumed data entity \"\n                        (pr-str entity-map)\n                        \" into the state at \"\n                        ident\n                        \" failed due to: \" e)\n               {} e)))))\n\n(defn- normalize* [query data tables union-seen transform]\n  ;; `tables` is an (atom {}) where we collect normalized tables for all components encountered during processing, i.e.\n  ;; we only return the \"top-level keys\" with their data/idents and all \"tables\" are inside this\n  (let [data (if (and transform (not (vector? data)))\n               (transform query data)\n               data)]\n    (cond\n      (= '[*] query) data\n\n      ;; union case\n      (map? query)\n      (let [class (-> query meta :component)\n            ident (get-ident class data)]\n        (if-not (nil? ident)\n          (vary-meta (normalize* (get query (first ident)) data tables union-seen transform)\n            assoc ::tag (first ident))                      ; FIXME: What is tag for?\n          (throw (ex-info \"Union components must have an ident\" {}))))\n\n      (vector? data) data                                   ;; already normalized\n\n      :else\n      (loop [q (seq query), ret data]\n        (if-not (nil? q)\n          (let [expr (first q)]\n            (if (util/join? expr)\n              (let [[join-key subquery] (util/join-entry expr)\n                    recursive?  (util/recursion? subquery)\n                    union-entry (if (util/union? expr) subquery union-seen)\n                    subquery    (if recursive?\n                                  (if-not (nil? union-seen)\n                                    union-seen\n                                    query)\n                                  subquery)\n                    class       (-> subquery meta :component)\n                    v           (get data join-key)]\n                (cond\n                  ;; graph loop: db->tree leaves ident in place\n                  (and recursive? (eql/ident? v)) (recur (next q) ret)\n                  ;; normalize one\n                  (map? v)\n                  (let [x (normalize* subquery v tables union-entry transform)]\n                    (if-not (or (nil? class) (not (has-ident? class)))\n                      (let [i (get-ident class x)]\n                        ;; Why don't we simply `update-in i ..` as we do below in normalize many?! Incidental?\n                        (swap! tables update-in [(first i) (second i)] merge x) ; add x to the normalized client DB\n                        (recur (next q) (assoc ret join-key i)))\n                      (recur (next q) (assoc ret join-key x))))\n\n                  ;; normalize many\n                  (and (vector? v) (not (eql/ident? v)) (not (eql/ident? (first v))))\n                  (let [xs (into [] (map #(normalize* subquery % tables union-entry transform)) v)]\n                    (if-not (or (nil? class) (not (has-ident? class)))\n                      (let [is (into [] (map #(get-ident class %)) xs)]\n                        ;; Where does the code - and the difference between union and non-union handling - come from?\n                        ;; A little lesson of history:\n                        ;; There was no if and no union handling in https://github.com/omcljs/om/commit/bbd94ac17a4c208f928a84915a050b787b65cb6a\n                        ;; It was added by https://github.com/omcljs/om/commit/3882cb5b9a3db95fa94b016bbe7bfe7f8b1db638 \"query union WIP\";\n                        ;; Later https://github.com/omcljs/om/commit/baaf4510d9970f1d9aa8dfcbe28bc89242bae87b#diff-8245f06a64876f1022b17c2eb5102ed6a658612b2da113093ea29185b5829682L2025\n                        ;; \"OM-802: Recursive query normalization incorrect \" changed the old branch's code to also use reduce\n                        ;; but keeping the zipmap, likely without noticing the branches became so similar so as to be mergable.\n                        ;; The zipmap used to be necessary according to https://github.com/omcljs/om/commit/baaf4510d9970f1d9aa8dfcbe28bc89242bae87b\n                        ;; because we needed to get a map to be able to merge it with tables[(ffirst is)], though it is\n                        ;; long gone. Thus the difference between `zipmap` in the true branch and `map vector` in the\n                        ;; else branch is purely incidental, IMHO. (The `map vector` seems superior as it does not\n                        ;; lose data if different subsets of the same entity are in the input though\n                        ;; properly behaving app should not do that and users should not rely on this behavior.)\n                        ;; The `(when-not (empty? is) ..` was added by https://github.com/omcljs/om/commit/8a34c2cf90d45de3c464eceb4a2866de2d99e5f0\n                        ;; and was necessary at that time b/c it still used `swap! refs update-in` and thus misbehaved for empty `is`\n                        ;;\n                        ;; I.e. I am 99.9% sure we could drop the `if` and only keep the else branch but for the fear of\n                        ;; breaking some rare corner case of a production app it was decided to keep the code as-is.\n                        (if (vector? subquery)\n                          (when-not (empty? is)\n                            (swap! tables\n                              (fn [tables']\n                                (reduce (fn merge-to-client-db [state [ident entity]] (upsert-ident state ident entity))\n                                  tables' (zipmap is xs)))))\n                          ;; union case\n                          (swap! tables\n                            (fn [tables']\n                              (reduce (fn merge-to-client-db [state [ident entity]] (upsert-ident state ident entity))\n                                ;; Note: `is` might have multiple `[<kwd> nil]` occurrences if `v` has 2+ entity types\n                                ;; the union does not handle, depending on its :ident impl. Do we care? why?\n                                tables' (map vector is xs)))))\n                        (recur (next q) (assoc ret join-key is)))\n                      (recur (next q) (assoc ret join-key xs))))\n\n                  ;; missing key\n                  (nil? v)\n                  (recur (next q) ret)\n\n                  ;; can't handle\n                  :else (recur (next q) (assoc ret join-key v))))\n              (let [k (if (seq? expr) (first expr) expr)\n                    v (get data k)]\n                (if (nil? v)\n                  (recur (next q) ret)\n                  (recur (next q) (assoc ret k v))))))\n          ret)))))\n\n(defn- better-normalize* [query data tables union-seen transform]\n  (try\n    (normalize* query data tables union-seen transform)\n    (catch #?(:clj Exception :cljs :default) e\n      ;; Don't blow up the app - ignore the bad update and log a good error:\n      (log/error \"Normalize failed and no data will be inserted into the client DB. Error:\"\n        (ex-message e)\n        (if-let [class (some-> query meta :component rc/component-name)]\n          (str \"Target component: \" class)\n          (str \"Query: \" query))\n        \"Data: \" data)\n      {})))\n\n(defn tree->db\n  \"Given a component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-idents\n   option is true, will return these tables in the result instead of as metadata.\"\n  ([x data]\n   (tree->db x data false))\n  ([x data #?(:clj merge-idents :cljs ^boolean merge-idents)]\n   (tree->db x data merge-idents nil))\n  ([x data #?(:clj merge-idents :cljs ^boolean merge-idents) transform]\n   (let [tables (atom {})\n         x      (if (vector? x) x (get-query x data))\n         ret    (better-normalize* x data tables nil transform)]\n     (if merge-idents\n       (merge ret @tables)\n       (with-meta ret @tables)))))\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.normalize/upsert-ident","state","ident","entity-map","e44858","cljs.core.update_in","cljs.core/merge","e","cljs.core/map?","cljs.core.ex_info","cljs.core.pr_str","com.fulcrologic.fulcro.algorithms.normalize/normalize*","query","data","tables","union-seen","transform","and__5041__auto__","cljs.core/vector?","cljs.core._EQ_","class","cljs.core/meta","com.fulcrologic.fulcro.raw.components.get_ident","cljs.core.vary_meta","G__44864","G__44865","G__44866","G__44867","G__44868","cljs.core.get","cljs.core/first","cljs.core/assoc","q","cljs.core/seq","ret","expr","com.fulcrologic.fulcro.algorithms.do-not-use/join?","vec__44911","cljs.core.nth","join-key","subquery","com.fulcrologic.fulcro.algorithms.do-not-use/join-entry","recursive?","com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","union-entry","com.fulcrologic.fulcro.algorithms.do-not-use/union?","v","edn-query-language.core/ident?","cljs.core/next","x","com.fulcrologic.fulcro.raw.components/has-ident?","i","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/second","cljs.core.assoc","xs","cljs.core.into","p1__44860#","cljs.core.map","is","p1__44861#","cljs.core/empty?","tables'","cljs.core.reduce","p__44952","vec__44954","entity","cljs.core/zipmap","p__44957","vec__44959","cljs.core/vector","k","cljs.core/seq?","com.fulcrologic.fulcro.algorithms.normalize/better-normalize*","e44968","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/ex-message","temp__5751__auto__","G__44971","com.fulcrologic.fulcro.raw.components/component-name","var_args","G__44978","com.fulcrologic.fulcro.algorithms.normalize/tree->db","js/Error","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db","merge-idents","cljs.core.atom","com.fulcrologic.fulcro.raw.components.get_query","cljs.core/deref","cljs.core.merge","cljs.core/with-meta"]],"~:used-vars",["^G",["~$cljs.core/ex-message","~$com.fulcrologic.fulcro.algorithms.normalize/upsert-ident","~$com.fulcrologic.fulcro.algorithms.do-not-use/join?","~$com.fulcrologic.fulcro.raw.components/get-ident","~$cljs.core/vector?","~$cljs.core/=","~$taoensso.timbre/-log!","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/Delay","~$cljs.core/atom","~$cljs.core/pr-str","~$cljs.core/empty?","~$com.fulcrologic.fulcro.raw.components/has-ident?","~$cljs.core/into","~$cljs.core/map?","~$taoensso.timbre/*config*","~$cljs.core/vary-meta","~$cljs.core/zipmap","~$cljs.core/with-meta","~$cljs.core/map","~$com.fulcrologic.fulcro.algorithms.do-not-use/union?","~$cljs.core/swap!","~$cljs.core/get","~$com.fulcrologic.fulcro.raw.components/component-name","~$com.fulcrologic.fulcro.algorithms.normalize/tree->db","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$cljs.core/second","~$cljs.core/next","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.normalize/better-normalize*","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.normalize/normalize*","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/merge","~$com.fulcrologic.fulcro.raw.components/get-query","~$cljs.core/update-in","~$js/Error","~$com.fulcrologic.fulcro.algorithms.do-not-use/join-entry","~$cljs.core/vector"]]],"~:cache-keys",["~#cmap",[["^1=","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["40bf4de481d2fba7fcc940dfaab8f2d9558eab4f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^V","^S","^X","^O","^Q","^U"]]],["^1=","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.dom.HtmlElement"]]],["^1=","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1=","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.asserts"]]],["^1=","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1=","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["40bf4de481d2fba7fcc940dfaab8f2d9558eab4f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^Q"]]],["^1=","cljs/spec/gen/alpha.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","~$goog.Uri"]]],["^1=","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","~$clojure.string","~$goog.string"]]],["^1=","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T"]]],["^1=","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2Z"]]],["^1=","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1=","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.array","~$goog.object","^2S","^2R"]]],["^1=","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2R"]]],["^1=","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T"]]],["^1=","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["40bf4de481d2fba7fcc940dfaab8f2d9558eab4f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^Q","^2Y","^O","^32","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1=","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2S","~$goog.reflect","^2R"]]],["^1=","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1=","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.events.Event","~$goog.events.EventId"]]],["^1=","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1=","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.async.FreeList","^2T"]]],["^1=","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2[","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^3B","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1=","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2U"]]],["^1=","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2Z","~$goog.string.StringBuffer"]]],["^1=","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.structs.Heap"]]],["^1=","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.Timer","^31","^2T","~$goog.collections.maps","^3G","^2V","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^32","^2Z","~$goog.uri.utils","^30","^2X","^3K","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1=","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2U"]]],["^1=","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S"]]],["^1=","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^3Q","^3R","^3S","^3P","^31","^2Z","^3U"]]],["^1=","taoensso/timbre.cljc"],["3e3c831bd3add911782b6db41dc04e62be6a0cbc","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^2Y","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^1=","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^44","^45"]]],["^1=","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1=","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.Disposable","^2T","~$goog.events","^3A","^3I","^3J","^32","^3B","^3L","^3N"]]],["^1=","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1=","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T"]]],["^1=","taoensso/encore.cljc"],["3c13701902dfed7dc5718fb3b45d8f2647459601","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^2Y","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^32","^31","^2Z","~$goog.string.format","^3U","^4>","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^40","^3[","~$taoensso.truss"]]],["^1=","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1655454131000,1655454131000,1654064059000],["^1=","taoensso/timbre/appenders/core.cljc"],["3e3c831bd3add911782b6db41dc04e62be6a0cbc","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^2Y","^47"]]],["^1=","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^3>"]]],["^1=","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3N","^3I"]]],["^1=","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.fs.blob","^33","~$goog.html.SafeScript","~$goog.html.trustedtypes","^35","^36","^37","^38"]]],["^1=","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^3O","^32","^3B","^3I","^3N"]]],["^1=","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","~$taoensso.truss.impl"]]],["^1=","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1=","edn_query_language/core.cljc"],["b84a23845b07ae3bcbbdef96e40bca48264c6561","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^@"]]],["^1=","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^37","~$goog.html.SafeUrl","^38","^2T","^2R"]]],["^1=","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4P","~$goog.html.SafeStyle","^4U","^34","~$goog.html.uncheckedconversions","^37","^2R"]]],["^1=","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^4B"]]],["^1=","clojure/walk.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S"]]],["^1=","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3;","^3=","^30"]]],["^1=","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.collections.iters","^4M","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1=","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4F","~$goog.structs.PriorityPool","^4L"]]],["^1=","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.i18n.DateTimeSymbols","^2Z"]]],["^1=","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^37","^35","^36","^4P","^4Y","~$goog.html.SafeStyleSheet","^4U","~$goog.dom.TagName","^34","^38","^2T","^3;","^31","^32","^2R","~$goog.dom.tags","^4Q"]]],["^1=","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^32"]]],["^1=","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","com/fulcrologic/fulcro/raw/components.cljc"],["40bf4de481d2fba7fcc940dfaab8f2d9558eab4f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^32","^4B","^2Y","~$clojure.walk","~$com.fulcrologic.fulcro.algorithms.denormalize","^X","~$com.fulcrologic.fulcro.algorithms.lookup","^O","^47","^Q"]]],["^1=","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31"]]],["^1=","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^2R","^2S"]]],["^1=","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","cljs/reader.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^32","^3T","^4D","^3U"]]],["^1=","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^2T","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^55","~$goog.dom.safe","^4X","^4Z","~$goog.math.Coordinate","~$goog.math.Size","^32","^2Z","^37","~$goog.string.Unicode","^30"]]],["^1=","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.debug.Error","^5;"]]],["^1=","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","~$goog.date.DateLike","^32","^2Z"]]],["^1=","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^2T","^3X","^2Z","^4J","^43","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.iter.Iterable","^4M","^50"]]],["^1=","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4=","^2T","~$goog.debug.EntryPointMonitor","^5@"]]],["^1=","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2W","^2T","^3F","~$goog.async.run","^3E","^5@","~$goog.promise.Resolver"]]],["^1=","cljs/spec/alpha.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^32","^57","~$cljs.spec.gen.alpha","^2Y"]]],["^1=","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",[]]],["^1=","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.json"]]],["^1=","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^32"]]],["^1=","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^3Q","^2Y","~$cljs.tools.reader.impl.inspect"]]],["^1=","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","clojure/string.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^2Z","^3U"]]],["^1=","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4=","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1=","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^49","~$goog.date.UtcDateTime","^53","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^2Z","~$goog.i18n.DateTimeSymbolsType"]]],["^1=","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^32","~$goog.structs.Node"]]],["^1=","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T"]]],["^1=","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^5<","^4Z","^37","^2R"]]],["^1=","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.labs.userAgent","^2R"]]],["^1=","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","~$goog.debug.errorcontext"]]],["^1=","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.math"]]],["^1=","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^3R","^2Z","^3U"]]],["^1=","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^31","^2T","~$goog.debug","^4W","^5U"]]],["^1=","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3G","~$goog.dom","^55","^4W","^3;","^3<"]]],["^1=","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^4X","^4P","^4Y","^54","^4U","^34","^37","^2R","^35"]]],["^1=","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4=","^3B"]]],["^1=","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^3P","^3Q","^3R"]]],["^1=","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4=","^4>","^32","^3A","^3B","^2V","^3M"]]],["^1=","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","cljs/core.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","~$goog.math.Long","~$goog.math.Integer","^2Z","^32","^31","^2X","^3U"]]],["^1=","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^37","^38","^4Q","^2T"]]],["^1=","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^5V"]]],["^1=","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^37","^4Y","^38","^32","^2T","^2R"]]],["^1=","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^5V","^3A","~$goog.events.EventType","^3>","^30"]]],["^1=","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3>"]]],["^1=","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^30"]]],["^1=","clojure/set.cljs"],["81c8fd45d40669c6a173bd1066b9cd90fa8b1a1b","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S"]]],["^1=","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^2Z"]]],["^1=","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^38"]]],["^1=","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^4@"]]],["^1=","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3B","^3L","^3N"]]],["^1=","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^3I"]]],["^1=","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^44"]]],["^1=","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["40bf4de481d2fba7fcc940dfaab8f2d9558eab4f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^S","^4B","^O","^Q"]]],["^1=","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","~$goog.net.WrapperXmlHttpFactory","^45","^44"]]],["^1=","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V"]]],["^1=","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2M",["^ ","^2N",null,"^2O",["^G",[]],"^2P",["^V","^2T","^39","^2R","^30","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/home/pushkar/.m2/repository/com/taoensso/encore/3.12.1/encore-3.12.1.jar!/taoensso/encore.cljc",1654064040000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/data/json.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/reader.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map/base64_vlq.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/com/taoensso/timbre/5.1.2/timbre-5.1.2.jar!/taoensso/timbre/appenders/core.cljc",1654064100000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map/base64.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1655451979000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/source_map.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/passes/and_or.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/env.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/spec/gen/alpha.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/com/taoensso/timbre/5.1.2/timbre-5.1.2.jar!/taoensso/timbre.cljc",1654064100000,"jar:file:/home/pushkar/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1653123567000,"jar:file:/home/pushkar/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1655451979000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/js_deps.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/spec/alpha.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/core.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/compiler.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/passes.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/util.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1655451982000,"jar:file:/home/pushkar/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1655451979000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/instant.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/impl.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/externs.clj",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/analyzer/impl/namespaces.cljc",1654064059000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1653101299000,"jar:file:/home/pushkar/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1654064085000,"jar:file:/home/pushkar/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1654064085000,"jar:file:/home/pushkar/.m2/repository/org/clojure/clojurescript/1.11.54/clojurescript-1.11.54.jar!/cljs/tagged_literals.cljc",1654064059000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Functions for dealing with normalizing Fulcro databases. In particular `tree->db`.","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^8",1,"^9",5,"^:",1,"^;",48],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^O","^P","^Q","^R","^O","^S","^S","^T","^U","^V","^V","^W","^X","^Q","^Q","^U","^U","^X","^X"],"^Y",["^G",["^Z"]],"~:shadow/js-access-global",["^G",["Error"]],"^[",["^ ","^10","^U","^11","^U","^12","^U"],"~:defs",["^ ","~$upsert-ident",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^8",9,"^9",8,"^:",9,"^;",20,"~:private",true,"~:arglists",["^15",["~$quote",["^15",[["~$state","~$ident","~$entity-map"]]]]],"^6","Insert or merge a data entity into a state table under the given `ident`.\n  A better version of `(update-in state ident merge entity-map)`.\n  Ex.: `(upsert-ident {} [:person/id 1] #:person{:id 1 :age 42}) => {:person/id {1 #:person{:id 1, :age 42}}}`"],"^7:",true,"^H","^1J","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^;",20,"~:method-params",["^15",[["^7=","^7>","^7?"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^9",1,"~:variadic?",false,"^8",9,"^:",9,"~:max-fixed-arity",3,"~:fn-var",true,"^7;",["^15",["^7<",["^15",[["^7=","^7>","^7?"]]]]],"^6","Insert or merge a data entity into a state table under the given `ident`.\n  A better version of `(update-in state ident merge entity-map)`.\n  Ex.: `(upsert-ident {} [:person/id 1] #:person{:id 1 :age 42}) => {:person/id {1 #:person{:id 1, :age 42}}}`"],"~$normalize*",["^ ","^79",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^8",29,"^9",8,"^:",29,"^;",18,"^7:",true,"^7;",["^15",["^7<",["^15",[["~$query","~$data","~$tables","~$union-seen","~$transform"]]]]]],"^7:",true,"^H","^2B","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^;",18,"^7@",["^15",[["^7G","^7H","^7I","^7J","^7K"]]],"^7A",null,"^7B",["^15",[null,null]],"^9",1,"^7C",false,"^8",29,"~:ret-tag",["^G",[null,"~$clj","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^:",29,"^7D",5,"^7E",true,"^7;",["^15",["^7<",["^15",[["^7G","^7H","^7I","^7J","^7K"]]]]]],"~$better-normalize*",["^ ","^79",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^8",129,"^9",8,"^:",129,"^;",25,"^7:",true,"^7;",["^15",["^7<",["^15",[["^7G","^7H","^7I","^7J","^7K"]]]]]],"^7:",true,"^H","^2@","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^;",25,"^7@",["^15",[["^7G","^7H","^7I","^7J","^7K"]]],"^7A",null,"^7B",["^15",[null,null]],"^9",1,"^7C",false,"^8",129,"^:",129,"^7D",5,"^7E",true,"^7;",["^15",["^7<",["^15",[["^7G","^7H","^7I","^7J","^7K"]]]]]],"~$tree->db",["^ ","^79",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^8",142,"^9",7,"^:",142,"^;",15,"^7;",["^15",["^7<",["^15",[["~$x","^7H"],["~$x","^7H","~$merge-idents"],["~$x","^7H","^7S","^7K"]]]]],"^6","Given a component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-idents\n   option is true, will return these tables in the result instead of as metadata.","~:top-fn",["^ ","^7C",false,"~:fixed-arity",4,"^7D",4,"^7@",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]],"^7;",["^15",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]]],"^7B",["^15",[null,null,null]]]],"^H","^29","^7","com/fulcrologic/fulcro/algorithms/normalize.cljc","^;",15,"^7T",["^ ","^7C",false,"^7U",4,"^7D",4,"^7@",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]],"^7;",["^15",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]]],"^7B",["^15",[null,null,null]]],"^7@",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]],"^7A",null,"^7U",4,"^7B",["^15",[null,null,null]],"^9",1,"^7C",false,"~:methods",[["^ ","^7U",2,"^7C",false,"~:tag","^7N"],["^ ","^7U",3,"^7C",false,"^7W","^7N"],["^ ","^7U",4,"^7C",false,"^7W",["^G",["^7M","^7N","^7O","^7P"]]]],"^8",142,"^:",142,"^7D",4,"^7E",true,"^7;",["^15",[["~$x","^7H"],["~$x","^7H","^7S"],["~$x","^7H","^7S","^7K"]]],"^6","Given a component class or instance and a tree of data, use the component's\n   query to transform the tree into the default database format. All nodes that\n   can be mapped via Ident implementations wil be replaced with ident links. The\n   original node data will be moved into tables indexed by ident. If merge-idents\n   option is true, will return these tables in the result instead of as metadata."]],"^13",["^ ","^S","^S","^P","^Q","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^Y",["^G",["~:else","~$*","~:component","~:com.fulcrologic.fulcro.algorithms.normalize/tag","~:error","~:auto","~:p"]],"~:order",["~$*","^7Z","^7[","^7Y","^80","~:p","^81"]],"^19",["^ ","^Z",["^G",[]]],"^1:",["^ "],"^1;",["^V","^S","^X","^O","^Q","^U"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^2L",[["^85","~:static-fns"],true,["^85","~:shadow-tweaks"],null,["^85","~:source-map-inline"],null,["^85","~:elide-asserts"],false,["^85","~:optimize-constants"],null,["^85","^1@"],null,["^85","~:external-config"],null,["^85","~:tooling-config"],null,["^85","~:emit-constants"],null,["^85","~:load-tests"],null,["^85","~:form-size-threshold"],null,["^85","~:global-goog-object&array"],null,["^85","~:data-readers"],null,["^85","~:infer-externs"],"^81",["^85","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^85","~:fn-invoke-direct"],null,["^85","~:source-map"],"/dev/null"]]]